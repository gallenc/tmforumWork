/*
 * Service Problem Management
 * ## TMF API Reference: TMF656 - Service Problem Management  ### Release : 18.5 - December 2018  Service Problem Management API goal is to provide the ability to manage problems in the Service domain.   ### Resource  - serviceProblem  ### Operations Service Problem Management API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.ServiceProblemRef;
import io.swagger.model.TrackingRecord;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * Task resource that requests acknowledgement of problems by the problem handler.
 */
@ApiModel(description = "Task resource that requests acknowledgement of problems by the problem handler.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2020-04-06T18:51:18.270Z")
public class ProblemAcknowledgement   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("href")
  private String href = null;

  @JsonProperty("ackProblem")
  private List<ServiceProblemRef> ackProblem = null;

  @JsonProperty("problem")
  private List<ServiceProblemRef> problem = null;

  @JsonProperty("trackingRecord")
  private TrackingRecord trackingRecord = null;

  @JsonProperty("@baseType")
  private String baseType = null;

  @JsonProperty("@schemaLocation")
  private String schemaLocation = null;

  @JsonProperty("@type")
  private String type = null;

  public ProblemAcknowledgement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this task resource
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(value = "Unique identifier of this task resource")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProblemAcknowledgement href(String href) {
    this.href = href;
    return this;
  }

  /**
   * Reference to this task resource
   * @return href
   **/
  @JsonProperty("href")
  @ApiModelProperty(value = "Reference to this task resource")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public ProblemAcknowledgement ackProblem(List<ServiceProblemRef> ackProblem) {
    this.ackProblem = ackProblem;
    return this;
  }

  public ProblemAcknowledgement addAckProblemItem(ServiceProblemRef ackProblemItem) {
    if (this.ackProblem == null) {
      this.ackProblem = new ArrayList<ServiceProblemRef>();
    }
    this.ackProblem.add(ackProblemItem);
    return this;
  }

  /**
   * The problems that were acknowledged, populated in the output to this task
   * @return ackProblem
   **/
  @JsonProperty("ackProblem")
  @ApiModelProperty(value = "The problems that were acknowledged, populated in the output to this task")
  public List<ServiceProblemRef> getAckProblem() {
    return ackProblem;
  }

  public void setAckProblem(List<ServiceProblemRef> ackProblem) {
    this.ackProblem = ackProblem;
  }

  public ProblemAcknowledgement problem(List<ServiceProblemRef> problem) {
    this.problem = problem;
    return this;
  }

  public ProblemAcknowledgement addProblemItem(ServiceProblemRef problemItem) {
    if (this.problem == null) {
      this.problem = new ArrayList<ServiceProblemRef>();
    }
    this.problem.add(problemItem);
    return this;
  }

  /**
   * The problems to be acknowledged, relevant in the input to this task
   * @return problem
   **/
  @JsonProperty("problem")
  @ApiModelProperty(value = "The problems to be acknowledged, relevant in the input to this task")
  public List<ServiceProblemRef> getProblem() {
    return problem;
  }

  public void setProblem(List<ServiceProblemRef> problem) {
    this.problem = problem;
  }

  public ProblemAcknowledgement trackingRecord(TrackingRecord trackingRecord) {
    this.trackingRecord = trackingRecord;
    return this;
  }

  /**
   * A record of the action taken in this acknowledgement
   * @return trackingRecord
   **/
  @JsonProperty("trackingRecord")
  @ApiModelProperty(value = "A record of the action taken in this acknowledgement")
  public TrackingRecord getTrackingRecord() {
    return trackingRecord;
  }

  public void setTrackingRecord(TrackingRecord trackingRecord) {
    this.trackingRecord = trackingRecord;
  }

  public ProblemAcknowledgement baseType(String baseType) {
    this.baseType = baseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return baseType
   **/
  @JsonProperty("@baseType")
  @ApiModelProperty(value = "When sub-classing, this defines the super-class")
  public String getBaseType() {
    return baseType;
  }

  public void setBaseType(String baseType) {
    this.baseType = baseType;
  }

  public ProblemAcknowledgement schemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return schemaLocation
   **/
  @JsonProperty("@schemaLocation")
  @ApiModelProperty(value = "A URI to a JSON-Schema file that defines additional attributes and relationships")
  public String getSchemaLocation() {
    return schemaLocation;
  }

  public void setSchemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
  }

  public ProblemAcknowledgement type(String type) {
    this.type = type;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class entity name
   * @return type
   **/
  @JsonProperty("@type")
  @ApiModelProperty(value = "When sub-classing, this defines the sub-class entity name")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemAcknowledgement problemAcknowledgement = (ProblemAcknowledgement) o;
    return Objects.equals(this.id, problemAcknowledgement.id) &&
        Objects.equals(this.href, problemAcknowledgement.href) &&
        Objects.equals(this.ackProblem, problemAcknowledgement.ackProblem) &&
        Objects.equals(this.problem, problemAcknowledgement.problem) &&
        Objects.equals(this.trackingRecord, problemAcknowledgement.trackingRecord) &&
        Objects.equals(this.baseType, problemAcknowledgement.baseType) &&
        Objects.equals(this.schemaLocation, problemAcknowledgement.schemaLocation) &&
        Objects.equals(this.type, problemAcknowledgement.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, ackProblem, problem, trackingRecord, baseType, schemaLocation, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemAcknowledgement {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    ackProblem: ").append(toIndentedString(ackProblem)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("    trackingRecord: ").append(toIndentedString(trackingRecord)).append("\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

