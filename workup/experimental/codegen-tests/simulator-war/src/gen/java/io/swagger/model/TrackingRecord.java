/*
 * Service Problem Management
 * ## TMF API Reference: TMF656 - Service Problem Management  ### Release : 18.5 - December 2018  Service Problem Management API goal is to provide the ability to manage problems in the Service domain.   ### Resource  - serviceProblem  ### Operations Service Problem Management API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.Characteristic;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.*;

/**
 * Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records
 */
@ApiModel(description = "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2020-04-06T18:51:18.270Z")
public class TrackingRecord   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("systemId")
  private String systemId = null;

  @JsonProperty("time")
  private Date time = null;

  @JsonProperty("user")
  private String user = null;

  @JsonProperty("extensionInfo")
  private List<Characteristic> extensionInfo = null;

  @JsonProperty("@baseType")
  private String baseType = null;

  @JsonProperty("@schemaLocation")
  private String schemaLocation = null;

  @JsonProperty("@type")
  private String type = null;

  public TrackingRecord id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the TrackingRecord
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(value = "Identifier of the TrackingRecord")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TrackingRecord description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Describes the action being done, such as: ack, clear
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Describes the action being done, such as: ack, clear")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TrackingRecord systemId(String systemId) {
    this.systemId = systemId;
    return this;
  }

  /**
   * Describes the system Id from which the action was done
   * @return systemId
   **/
  @JsonProperty("systemId")
  @ApiModelProperty(value = "Describes the system Id from which the action was done")
  public String getSystemId() {
    return systemId;
  }

  public void setSystemId(String systemId) {
    this.systemId = systemId;
  }

  public TrackingRecord time(Date time) {
    this.time = time;
    return this;
  }

  /**
   * Describes the time at which the action was done
   * @return time
   **/
  @JsonProperty("time")
  @ApiModelProperty(value = "Describes the time at which the action was done")
  public Date getTime() {
    return time;
  }

  public void setTime(Date time) {
    this.time = time;
  }

  public TrackingRecord user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Describes the user doing the action
   * @return user
   **/
  @JsonProperty("user")
  @ApiModelProperty(value = "Describes the user doing the action")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public TrackingRecord extensionInfo(List<Characteristic> extensionInfo) {
    this.extensionInfo = extensionInfo;
    return this;
  }

  public TrackingRecord addExtensionInfoItem(Characteristic extensionInfoItem) {
    if (this.extensionInfo == null) {
      this.extensionInfo = new ArrayList<Characteristic>();
    }
    this.extensionInfo.add(extensionInfoItem);
    return this;
  }

  /**
   * A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces
   * @return extensionInfo
   **/
  @JsonProperty("extensionInfo")
  @ApiModelProperty(value = "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces")
  public List<Characteristic> getExtensionInfo() {
    return extensionInfo;
  }

  public void setExtensionInfo(List<Characteristic> extensionInfo) {
    this.extensionInfo = extensionInfo;
  }

  public TrackingRecord baseType(String baseType) {
    this.baseType = baseType;
    return this;
  }

  /**
   * When sub-classing, this defines the super-class
   * @return baseType
   **/
  @JsonProperty("@baseType")
  @ApiModelProperty(value = "When sub-classing, this defines the super-class")
  public String getBaseType() {
    return baseType;
  }

  public void setBaseType(String baseType) {
    this.baseType = baseType;
  }

  public TrackingRecord schemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
    return this;
  }

  /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return schemaLocation
   **/
  @JsonProperty("@schemaLocation")
  @ApiModelProperty(value = "A URI to a JSON-Schema file that defines additional attributes and relationships")
  public String getSchemaLocation() {
    return schemaLocation;
  }

  public void setSchemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
  }

  public TrackingRecord type(String type) {
    this.type = type;
    return this;
  }

  /**
   * When sub-classing, this defines the sub-class entity name
   * @return type
   **/
  @JsonProperty("@type")
  @ApiModelProperty(value = "When sub-classing, this defines the sub-class entity name")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingRecord trackingRecord = (TrackingRecord) o;
    return Objects.equals(this.id, trackingRecord.id) &&
        Objects.equals(this.description, trackingRecord.description) &&
        Objects.equals(this.systemId, trackingRecord.systemId) &&
        Objects.equals(this.time, trackingRecord.time) &&
        Objects.equals(this.user, trackingRecord.user) &&
        Objects.equals(this.extensionInfo, trackingRecord.extensionInfo) &&
        Objects.equals(this.baseType, trackingRecord.baseType) &&
        Objects.equals(this.schemaLocation, trackingRecord.schemaLocation) &&
        Objects.equals(this.type, trackingRecord.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, systemId, time, user, extensionInfo, baseType, schemaLocation, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingRecord {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    extensionInfo: ").append(toIndentedString(extensionInfo)).append("\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

