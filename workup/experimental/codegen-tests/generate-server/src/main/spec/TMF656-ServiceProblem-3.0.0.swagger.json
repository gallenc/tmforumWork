{
    "swagger": "2.0", 
    "info": {
        "title": "Service Problem Management", 
        "description": "## TMF API Reference: TMF656 - Service Problem Management\n\n### Release : 18.5 - December 2018\n\nService Problem Management API goal is to provide the ability to manage problems in the Service domain. \n\n### Resource \n- serviceProblem\n\n### Operations\nService Problem Management API performs the following operations on the resource :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events", 
        "version": "3.0.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/serviceProblemManagement/v3/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json;charset=utf-8"
    ], 
    "produces": [
        "application/json;charset=utf-8"
    ], 
    "tags": [
        {
            "name": "serviceProblem"
        }, 
        {
            "name": "serviceProblemEventRecord"
        }, 
        {
            "name": "problemAcknowledgement"
        }, 
        {
            "name": "problemUnacknowledgement"
        }, 
        {
            "name": "problemGroup"
        }, 
        {
            "name": "problemUngroup"
        }, 
        {
            "name": "notification listeners (client side)"
        }, 
        {
            "name": "events subscription"
        }
    ], 
    "paths": {
        "/serviceProblem": {
            "get": {
                "operationId": "listServiceProblem", 
                "summary": "List or find ServiceProblem objects", 
                "description": "This operation list or find ServiceProblem entities", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceProblem"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceProblem", 
                "summary": "Creates a ServiceProblem", 
                "description": "This operation creates a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The ServiceProblem to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblem/{id}": {
            "get": {
                "operationId": "retrieveServiceProblem", 
                "summary": "Retrieves a ServiceProblem by ID", 
                "description": "This operation retrieves a ServiceProblem entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceProblem", 
                "summary": "Updates partially a ServiceProblem", 
                "description": "This operation updates partially a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The ServiceProblem to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceProblem", 
                "summary": "Deletes a ServiceProblem", 
                "description": "This operation deletes a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblemEventRecord": {
            "get": {
                "operationId": "listServiceProblemEventRecord", 
                "summary": "List or find ServiceProblemEventRecord objects", 
                "description": "This operation list or find ServiceProblemEventRecord entities", 
                "tags": [
                    "serviceProblemEventRecord"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceProblemEventRecord"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblemEventRecord/{id}": {
            "get": {
                "operationId": "retrieveServiceProblemEventRecord", 
                "summary": "Retrieves a ServiceProblemEventRecord by ID", 
                "description": "This operation retrieves a ServiceProblemEventRecord entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceProblemEventRecord"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblemEventRecord"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemEventRecord"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/problemAcknowledgement": {
            "post": {
                "operationId": "createProblemAcknowledgement", 
                "summary": "Creates a ProblemAcknowledgement", 
                "description": "This operation creates a ProblemAcknowledgement entity.", 
                "tags": [
                    "problemAcknowledgement"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProblemAcknowledgement_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "problemAcknowledgement", 
                        "description": "The ProblemAcknowledgement to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ProblemAcknowledgement"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/problemAcknowledgement/{id}": {}, 
        "/problemUnacknowledgement": {
            "post": {
                "operationId": "createProblemUnacknowledgement", 
                "summary": "Creates a ProblemUnacknowledgement", 
                "description": "This operation creates a ProblemUnacknowledgement entity.", 
                "tags": [
                    "problemUnacknowledgement"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProblemUnacknowledgement_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "problemUnacknowledgement", 
                        "description": "The ProblemUnacknowledgement to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ProblemUnacknowledgement"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/problemUnacknowledgement/{id}": {}, 
        "/problemGroup": {
            "post": {
                "operationId": "createProblemGroup", 
                "summary": "Creates a ProblemGroup", 
                "description": "This operation creates a ProblemGroup entity.", 
                "tags": [
                    "problemGroup"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProblemGroup_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "problemGroup", 
                        "description": "The ProblemGroup to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ProblemGroup"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/problemGroup/{id}": {}, 
        "/problemUngroup": {
            "post": {
                "operationId": "createProblemUngroup", 
                "summary": "Creates a ProblemUngroup", 
                "description": "This operation creates a ProblemUngroup entity.", 
                "tags": [
                    "problemUngroup"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ProblemUngroup_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "problemUngroup", 
                        "description": "The ProblemUngroup to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ProblemUngroup"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/problemUngroup/{id}": {}, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemCreateNotification": {
            "post": {
                "operationId": "listenToServiceProblemCreateNotification", 
                "summary": "Client listener for entity ServiceProblemCreateNotification", 
                "description": "Example of a client listener for receiving the notification ServiceProblemCreateNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemCreateNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemStateChangeNotification": {
            "post": {
                "operationId": "listenToServiceProblemStateChangeNotification", 
                "summary": "Client listener for entity ServiceProblemStateChangeNotification", 
                "description": "Example of a client listener for receiving the notification ServiceProblemStateChangeNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemStateChangeNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemAttributeValueChangeNotification": {
            "post": {
                "operationId": "listenToServiceProblemAttributeValueChangeNotification", 
                "summary": "Client listener for entity ServiceProblemAttributeValueChangeNotification", 
                "description": "Example of a client listener for receiving the notification ServiceProblemAttributeValueChangeNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemAttributeValueChangeNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemInformationRequiredNotification": {
            "post": {
                "operationId": "listenToServiceProblemInformationRequiredNotification", 
                "summary": "Client listener for entity ServiceProblemInformationRequiredNotification", 
                "description": "Example of a client listener for receiving the notification ServiceProblemInformationRequiredNotification", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemInformationRequiredNotification"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "Any": {}, 
        "ChangeRequestRef": {
            "type": "object", 
            "description": "Reference to a Change Request", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of the change request"
                }, 
                "href": {
                    "type": "string", 
                    "description": "The reference link to the change request"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "Characteristic": {
            "type": "object", 
            "description": "Describes a given characteristic of an object or entity through a name/value pair.", 
            "required": [
                "name", 
                "value"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the characteristic"
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "Data type of the value of the characteristic"
                }, 
                "value": {
                    "$ref": "#/definitions/Any", 
                    "description": "The value of the characteristic"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "EventRef": {
            "type": "object", 
            "description": "Events linked with service problem", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "ID of the event"
                }, 
                "href": {
                    "type": "string", 
                    "description": "event reference"
                }, 
                "eventTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the event occurred"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "Type of the event"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ImpactPattern": {
            "type": "object", 
            "description": "Define the patterns of impact (optional), such as other service characteristics- Used when defining impact through another pattern than the pre-defined attributes", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Basic description of the impact pattern"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for extensions or loose element encapsulation from other namespaces"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Note": {
            "type": "object", 
            "description": "Extra information about a given entity", 
            "properties": {
                "author": {
                    "type": "string", 
                    "description": "Author of the note"
                }, 
                "date": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date of the note"
                }, 
                "system": {
                    "type": "string", 
                    "description": "Describes the system from which the action related to this note was done"
                }, 
                "text": {
                    "type": "string", 
                    "description": "Text of the note"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "description": "Place reference. Place defines the places where the products are sold or delivered.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the place"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the place"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the place, such as: [home delivery], [shop retrieval])"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemAcknowledgement": {
            "type": "object", 
            "description": "Task resource that requests acknowledgement of problems by the problem handler.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of this task resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to this task resource"
                }, 
                "ackProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems that were acknowledged, populated in the output to this task"
                }, 
                "problem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems to be acknowledged, relevant in the input to this task"
                }, 
                "trackingRecord": {
                    "$ref": "#/definitions/TrackingRecord", 
                    "description": "A record of the action taken in this acknowledgement"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemAcknowledgement_Create": {
            "type": "object", 
            "description": "Task resource that requests acknowledgement of problems by the problem handler.\nSkipped properties: id,href", 
            "required": [
                "problem"
            ], 
            "properties": {
                "ackProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems that were acknowledged, populated in the output to this task"
                }, 
                "problem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "minItems": 1, 
                    "description": "The problems to be acknowledged, relevant in the input to this task"
                }, 
                "trackingRecord": {
                    "$ref": "#/definitions/TrackingRecord", 
                    "description": "A record of the action taken in this acknowledgement"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemGroup": {
            "type": "object", 
            "description": "Task resource that requests Service Problems to be grouped together into a parent and set of children", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of this task resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to this task resource"
                }, 
                "childProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "List of problems to be grouped under a parent problem"
                }, 
                "parentProblem": {
                    "$ref": "#/definitions/ServiceProblemRef", 
                    "description": "The parent problem to which the problems are to be grouped"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemGroup_Create": {
            "type": "object", 
            "description": "Task resource that requests Service Problems to be grouped together into a parent and set of children\nSkipped properties: id,href", 
            "required": [
                "parentProblem", 
                "childProblem"
            ], 
            "properties": {
                "childProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "minItems": 1, 
                    "description": "List of problems to be grouped under a parent problem"
                }, 
                "parentProblem": {
                    "$ref": "#/definitions/ServiceProblemRef", 
                    "description": "The parent problem to which the problems are to be grouped"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemUnacknowledgement": {
            "type": "object", 
            "description": "Task resource that requests unacknowledgement of problems, rolling back the status of the problems from Acknowledged to Submitted.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of this task resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to this task resource"
                }, 
                "problem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems to be unacknowledged, relevant in the input to this task"
                }, 
                "trackingRecord": {
                    "$ref": "#/definitions/TrackingRecord", 
                    "description": "A record of the action taken in this acknowledgement"
                }, 
                "unackProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems that were unacknowledged, populated in the output to this task"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemUnacknowledgement_Create": {
            "type": "object", 
            "description": "Task resource that requests unacknowledgement of problems, rolling back the status of the problems from Acknowledged to Submitted.\nSkipped properties: id,href", 
            "required": [
                "problem"
            ], 
            "properties": {
                "problem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "minItems": 1, 
                    "description": "The problems to be unacknowledged, relevant in the input to this task"
                }, 
                "trackingRecord": {
                    "$ref": "#/definitions/TrackingRecord", 
                    "description": "A record of the action taken in this acknowledgement"
                }, 
                "unackProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The problems that were unacknowledged, populated in the output to this task"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemUngroup": {
            "type": "object", 
            "description": "Task resource that requests Service Problems to be ungrouped from a parent", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of this task resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to this task resource"
                }, 
                "childProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "List of problems to be ungrouped from a parent problem"
                }, 
                "parentProblem": {
                    "$ref": "#/definitions/ServiceProblemRef", 
                    "description": "The parent problem from which the problems are to be ungrouped"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ProblemUngroup_Create": {
            "type": "object", 
            "description": "Task resource that requests Service Problems to be ungrouped from a parent\nSkipped properties: id,href", 
            "required": [
                "parentProblem", 
                "childProblem"
            ], 
            "properties": {
                "childProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "minItems": 1, 
                    "description": "List of problems to be ungrouped from a parent problem"
                }, 
                "parentProblem": {
                    "$ref": "#/definitions/ServiceProblemRef", 
                    "description": "The parent problem from which the problems are to be ungrouped"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "RelatedEntityRef": {
            "type": "object", 
            "description": "A reference to an entity, where the type of the entity is not known in advance.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of an entity."
                }, 
                "href": {
                    "type": "string", 
                    "description": "The hyperlink to access an entity."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of an entity."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "RelatedParty": {
            "type": "object", 
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a related party"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the related party, could be a party reference or a party role reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the related party."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ResourceAlarmRef": {
            "type": "object", 
            "description": "A set of alarm ids identifying the alarms that are underlying this problem.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Alarm"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Alarm"
                }, 
                "changeRequest": {
                    "$ref": "#/definitions/ChangeRequestRef"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ResourceRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the supporting resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the supporting resource"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the resource supporting the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "SLAViolationRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "href": {
                    "type": "string"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ServiceProblem": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the service problem"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the Service Problem"
                }, 
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/RelatedEntityRef", 
                    "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }, 
                    "description": "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblem_Create": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href", 
            "required": [
                "category", 
                "priority", 
                "description", 
                "reason", 
                "originatorParty"
            ], 
            "properties": {
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/RelatedEntityRef", 
                    "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }, 
                    "description": "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblem_Update": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href,correlationId,firstAlert,originatingSystem,timeRaised,trackingRecord", 
            "properties": {
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblemEventRecord": {
            "type": "object", 
            "description": "A record of an event (related to a service problem) received from another system", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the service problem event record."
                }, 
                "href": {
                    "type": "string", 
                    "description": "reference to this resource"
                }, 
                "eventTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time at which the event occurred"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "Type of the recorded event"
                }, 
                "recordTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time at which the record was created"
                }, 
                "notification": {
                    "$ref": "#/definitions/Any", 
                    "description": "A notification from the possible notifications for Service Problem (such as creation, status change, information required, change)"
                }, 
                "serviceProblem": {
                    "$ref": "#/definitions/ServiceProblemRef", 
                    "description": "The service problem to which this record applies"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblemRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Problem"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Problem"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "ServiceRef": {
            "type": "object", 
            "description": "Service reference, for when Service is used by other entities", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "reference of the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "TrackingRecord": {
            "type": "object", 
            "description": "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the TrackingRecord"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Describes the action being done, such as: ack, clear"
                }, 
                "systemId": {
                    "type": "string", 
                    "description": "Describes the system Id from which the action was done"
                }, 
                "time": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Describes the time at which the action was done"
                }, 
                "user": {
                    "type": "string", 
                    "description": "Describes the user doing the action"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "TroubleTicketRef": {
            "type": "object", 
            "description": "A trouble ticket represents a record used for reporting and managing the resolution of resource problems", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the trouble ticket"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the trouble ticket"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the Trouble Ticket"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id", 
                "href"
            ]
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "ServiceProblemCreateNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemCreateEvent"
                }
            }
        }, 
        "ServiceProblemCreateEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemStateChangeNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemStateChangeEvent"
                }
            }
        }, 
        "ServiceProblemStateChangeEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemAttributeValueChangeNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemAttributeValueChangeEvent"
                }
            }
        }, 
        "ServiceProblemAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemInformationRequiredNotification": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "eventId": {
                    "type": "string", 
                    "description": "The identifier of the notification"
                }, 
                "eventTime": {
                    "type": "string", 
                    "description": "Time of the event occurrence", 
                    "format": "date-time"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "The type of the notification"
                }, 
                "fieldPath": {
                    "type": "string", 
                    "description": "The path identifying the object field concerned by this notification"
                }, 
                "resourcePath": {
                    "type": "string", 
                    "description": "The path identifying the resource object concerned by this notification"
                }, 
                "event": {
                    "description": "The event linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemInformationRequiredEvent"
                }
            }
        }, 
        "ServiceProblemInformationRequiredEvent": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "type": "object", 
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)", 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application relevant detail, defined in the API or a common list."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                }, 
                "message": {
                    "type": "string", 
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "HTTP Error code extension"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "URI of documentation describing the error.", 
                    "format": "uri"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
