
/*    <start-script language="beanshell"> */

      log = bsf.lookupBean("log");
      log.debug("running start script");
      
      import java.util.ArrayList;
      import java.util.List;

      source("src/main/resources/scriptedApacheHttpAsyncClient.bsh");
      scriptedClient = scriptedApacheHttpAsyncClient();      
      
      source("src/main/resources/scriptedEventSPMForwarder.bsh");
      spmForwarder = scriptedEventSPMForwarder();
      
      /* set urls and credentials for spm hosts UrlCredential(String url, String username, String password) */
      url1= urlCredential("http://tmf656-test1.centralus.cloudapp.azure.com:8080/tmf656-spm-simulator-war", "username", "password" );

      List urlCredentials = new ArrayList();
      urlCredentials.add(url1);
 
      spmForwarder.setUrlCredentials(urlCredentials);

      log.debug("setting scripted client for spmForwarder");
      spmForwarder.setScriptedClient(scriptedClient);
      
      log.debug("setting messageHandler for scriptedClient");
      scriptedClient.setMessageHandler(spmForwarder);
      
      /* setting up http server for allowed target urls on port 8081 with no https/SSL key file */
         
      source("src/main/resources/scriptedApacheHttpServer.bsh");
      
      int port=8081;

      String[] allowedTargets = {"/",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemAttributeValueChangeNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemCreateNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemInformationRequiredNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3//listener/serviceProblemStateChangeNotification",
                "/generic-listener/notification"
                };
      String keyStoreFileLocation = null;
      
      jsonQueue = scriptedClient.getjsonQueue();
      
      scriptedHttpServer = scriptedApacheHttpServer(port, jsonQueue, allowedTargets, keyStoreFileLocation);

      log.debug("start script starting message listener");
      scriptedClient.startListener();
      log.debug("start script starting spm client");
      scriptedClient.startClient();
      
      log.debug("start script starting spm notification listening http server");
      scriptedHttpServer.start();

      log.debug("end of start script");

/*    </start-script"> */