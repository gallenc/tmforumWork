<?xml version="1.0"?>
<!-- scriptd-config.xml revision 8.0 -->
<!-- OpenNMSC catalyst  10.7.23.219 -->
<!-- cortexA catalyst   10.7.23.204:10000 / 3.15.141.111:10000 -->
<scriptd-configuration transactional="false" >
    <engine language="beanshell" className="bsh.util.BeanShellBSFEngine" extensions="bsh" />
    <start-script language="beanshell">

      log = bsf.lookupBean("log");
      log.debug("running start script");
      
      import java.util.ArrayList;
      import java.util.List;

      source("/opt/opennms/etc/scriptedApacheHttpAsyncClient.bsh");
      scriptedClient = scriptedApacheHttpAsyncClient();
      
      /* set time out for async client http requests to 5 seconds */
      /* scriptedClient.setTimeout(5000); */
      
      /* cortex set to 20 seconds */
      scriptedClient.setTimeout(20000);
      
      source("/opt/opennms/etc/scriptedEventSPMForwarder.bsh");
      spmForwarder = scriptedEventSPMForwarder();
      
      /* -----------------------------------------------*/
      /* setting up client credentials for sending service problems to service problem server */
      /* -----------------------------------------------*/
      
      /* convenience placeholder for SPM server. */
      /* spmHubUrl1="http://tmf656-test1.centralus.cloudapp.azure.com:8080"; */
      /* spmHubUrl1="http://localhost:8080"; */

      /* cortexA */
      /* "https://10.7.23.204:10000/tmf-api/serviceProblemManagement/v3/serviceProblem" */
      spmHubUrl1="https://ec2-3-15-141-111.us-east-2.compute.amazonaws.com:10000";

      /* set name of this originating system in sent spm calls */
      /* spmForwarder.setThisOriginatingSystem("testOpenNMS"); */
      
      spmForwarder.setThisOriginatingSystem("OpenNMSC");
      
      /* set name of this originating party in sent spm calls */
      /* spmForwarder.setThisOriginatorParty("party1"); */
            
      spmForwarder.setThisOriginatorParty("8A3BA497-8B70-4A13-AB2D-593ED58EB232");
      
      /* set base href for party manager in sent spm calls */
      /* spmForwarder.setPartyManagementBaseHrefUrl("http://localhost:8080/tmf-api/partyManagement/v3/party/"); */
                                                  
      spmForwarder.setPartyManagementBaseHrefUrl("https://3.15.141.111:10000/tmf-api/serviceProblemManagement/v3/Party/");
     
      /* set base href for service inventory manager in sent spm calls */
      /* spmForwarder.setServiceInventoryManagementBaseHrefUrl("http://localhost:8080/tmf-api/serviceInventoryManagement/v3/service/"); */

      spmForwarder.setServiceInventoryManagementBaseHrefUrl("https://3.15.141.111:10000/tmf-api/serviceInventoryManagement/v3/service/");

      /* set base href for resource inventory manager in sent spm calls */
      /* spmForwarder.setResourceInventoryManagementBaseHrefUrl("http://localhost:8080/tmf-api/resourceInventoryManagement/v3/resource/"); */

      spmForwarder.setResourceInventoryManagementBaseHrefUrl("https://3.15.141.111:10000/tmf-api/resourceInventoryManagement/v3/resource/");

      /* set urls and credentials for spm hosts constructor variables : UrlCredential(String url, String username, String password) */
      /* username and password are basic auth credentials for posting notifications to the server (not currently used) */
      /* url1= urlCredential(spmHubUrl1 + "/tmf656-simulator-war", "username", "password", null ); */

      url1= urlCredential(spmHubUrl1 , "username", "password", null );

      List urlCredentials = new ArrayList();
      urlCredentials.add(url1);
 
      spmForwarder.setUrlCredentials(urlCredentials);

      log.debug("setting scripted client for spmForwarder");
      spmForwarder.setScriptedClient(scriptedClient);
      
      log.debug("setting messageHandler for scriptedClient");
      scriptedClient.setMessageHandler(spmForwarder);
    
      /* -----------------------------------------------*/
      /* setting up http notification listening server  */
      /* -----------------------------------------------*/

      source("/opt/opennms/etc/scriptedApacheHttpServer.bsh");
      
      /* example sets allowed target urls on port 8981 with no https/SSL key file */
      
      /* port on which OpenNMS listens for notifications */
      int port=8981;

      /* allowed target notification url's http(s)://-opennms-ip-address-:port/-targets- */
      String[] allowedTargets = {
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemAttributeValueChangeNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemCreateNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemInformationRequiredNotification",
                "/opennms/tmf-api/serviceProblemManagement/v3/listener/serviceProblemStateChangeNotification",
                "/opennms/tmf-api/generic-listener/notification"
                };

      /* if https is being used this is the keystore for certificates */
      String keyStoreFileLocation = null;
      
      jsonQueue = scriptedClient.getjsonQueue();
      
      scriptedHttpServer = scriptedApacheHttpServer(port, jsonQueue, allowedTargets, keyStoreFileLocation);

      log.debug("start script starting message listener");
      scriptedClient.startListener();
      log.debug("start script starting httpAsyncClient");
      scriptedClient.startClient();

      log.debug("start script starting spm notification listening http server");
      scriptedHttpServer.start();

      /* set urls and credentials and spm filter queries for spm hosts sending notifications */
      /* constructor variables : UrlCredential(String url, String username, String password, String query) */
      /* String query1=""; */
      /* notificationCredential1= urlCredential(spmHubUrl1 + "/tmf656-simulator-war", "username", "password", query1 ); */

      /* listens for watchdog notifications from cortexA */
      /* (for test only) */
      notificationCredential1= urlCredential(spmHubUrl1, "username", "password", "serviceProblem.id=00000000-0000-0000-0000-000000000000" );

      /* listens for filtered notifications from cortexA */
      
      /* old notificationCredential2= urlCredential(spmHubUrl1, "username", "password", "affectedResource.id=7603F67D-631E-4A46-8FA7-52B0199A7E3F" ); */
      
      /* listens for resource notifications IoT-1, IoT-2, IoT-3 &amp; escapes ampersand*/
      /* notificationCredential2= urlCredential(spmHubUrl1, "username", "password", "affectedResource.id=7603F67D-631E-4A46-8FA7-52B0199A7E3F&amp;affectedResource.id=4CFE4CF3-B012-460E-9100-A70AB1BBA6BA&amp;affectedResource.id=8480257A-9E3F-4B58-B0AD-B3A147BA596F" ); */
      
      /* register for all service problems affecting vpn */
      notificationCredential2= urlCredential(spmHubUrl1, "username", "password", "affectedService.id=E51A0047-A36E-4FFA-A4CE-6C66FA5C07DA" );

      List notificationCredentials = new ArrayList();
      /* notificationCredentials.add(notificationCredential1); */
      notificationCredentials.add(notificationCredential2);
      
      /* set urls and credentials for notification call back constructor variables : UrlCredential(String url, String username, String password, String query) */
      /* username and password are basic auth credentials for posting notifications back to OpenNMS (not currently used) */
      /* this needs to point at the opennms listener but set as simulator for test. Note query is null and is not used here */
      /* callbackCredential = urlCredential(spmHubUrl1 + "/tmf656-simulator-war"+"/generic-listener/notification", "username", "password", null ); */
      /* String opennmsSpmListenerUrl= "http://localhost:8981/opennms/tmf-api/generic-listener/notification"; */

      /* OpenNMSC listener http://10.7.23.219:8981/opennms/tmf-api/serviceProblemManagement/v3 */
      String opennmsSpmListenerUrl= "http://10.7.23.219:8981/opennms/tmf-api/serviceProblemManagement/v3";

      callbackCredential = urlCredential(opennmsSpmListenerUrl, "username", "password", null );

      log.debug("start script registering to receive notifications");
      spmForwarder.startRegisterNotifications(notificationCredentials, callbackCredential);

      log.debug("end of start script");

    </start-script>

    <stop-script language="beanshell">

      log = bsf.lookupBean("log");
      log.debug("running beanshell stop script");
      
      log.debug("unregistering for notifications ");
      spmForwarder.stopRegisterNotifications();

      log.debug("stop script waiting for 20 secs");
      Thread.sleep(20000); 
      log.debug("stop script finished waiting");

      log.debug("stop script stop listener");
      scriptedClient.stopListener();
      log.debug("stop script stop client");
      scriptedClient.stopClient();

      log.debug("stop script stop http server");
      scriptedHttpServer.stop();
      
      log.debug("end of stop script");

    </stop-script>

    <event-script language="beanshell">

        log = bsf.lookupBean("log");
        log.debug("running on event script");
        
        ievent = bsf.lookupBean("event");
        node = bsf.lookupBean("node");
        
        spmForwarder.handleEvent(ievent, node);

        log.debug("end of on event script");

    </event-script>


</scriptd-configuration>

