/* Scripted SPM Event Forwarder - beanshell script*/
/* Author: Craig Gallen */
/* Version : 1.0 */


import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.opennms.netmgt.events.api.EventIpcManagerFactory;
import org.opennms.netmgt.events.api.model.IEvent;
import org.opennms.netmgt.model.OnmsNode;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.xml.event.AlarmData;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Logmsg;

urlCredential(String url, String username, String password) {
    public String getUrl() {
        return url;
    }
    public String getUsername() {
        return username;
    }
    public String getPassword() {
        return password;
    }

    /* returns this beanshell declaration so that its methods can be invoked */
    return this;
}

scriptedEventSPMForwarder() {

    /* Standard OpenNMS BSM events */
    String SERVICE_PROBLEM = "uei.opennms.org/bsm/serviceProblem";
    String SERVICE_OPERATIONAL_STATUS_CHANGED = "uei.opennms.org/bsm/serviceOperationalStatusChanged";
    String SERVICE_PROBLEM_RESOLVED = "uei.opennms.org/bsm/serviceProblemResolved";

    /* New Service Problem Reply Event */
    String SERVICE_PROBLEM_REPLY = "uei.opennms.org/bsm/serviceProblemReply";
    
    m_scriptedClient = null;
    
    m_urlCredentials = null;

    public void setUrlCredentials(List urlCredentials) {
        if (urlCredentials == null || urlCredentials.size() == 0) {
            log.error("urlCredentials is null or empty. Cannot send service problem");
            return;
        }
        for(urlCredential : urlCredentials) {
            String url = urlCredential.getUrl();
            try {
                URL u = new URL(url);
            } catch (MalformedURLException e) {
                log.error("UrlCredential[] urlCredentials malformed url="+url);
            }
        }
        m_urlCredentials = urlCredentials;
    }

    public void setScriptedClient(scriptedClient) {
        log.debug("scriptedEventSPMForwarder set scriptedClient "+ m_scriptedClient);
        m_scriptedClient = scriptedClient;
    }
    
    public JSONObject createMinimalServiceProblem(
            String originatingSystem,
            String category,
            String priority,
            String description,
            String reason,
            String correlationId,
            String[] affectedServices
            ) {

        JSONObject spm = new JSONObject();
        if (originatingSystem != null)
            spm.put("originatingSystem", originatingSystem);
        if (category != null)
            spm.put("category", category);
        if (priority != null)
            spm.put("priority", priority);
        if (description != null)
            spm.put("description", description);
        if (reason != null)
            spm.put("reason", reason);
        if (correlationId != null)
            spm.put("correlationId", correlationId);

        if (affectedServices!=null){
            JSONArray affectedService = new JSONArray();
            for (String service : affectedServices) {
                JSONObject jservice = new JSONObject();
                jservice.put("id",service);
                jservice.put("href",null);
                affectedService.add(jservice);
            }
            spm.put("affectedService", affectedService);
        }
        return spm;
        
    }

    public void handleEvent(IEvent ievent, OnmsNode node) {
        if(SERVICE_PROBLEM.equals(ievent.getUei())) {
            log.debug("handleEvent script received SERVICE_PROBLEM event:" + ievent + " node:"+node);
            updateServiceProblem(ievent);
            
        } else if(SERVICE_OPERATIONAL_STATUS_CHANGED.equals(ievent.getUei())) {
            log.debug("handleEvent script received SERVICE_OPERATIONAL_STATUS_CHANGED event:" + ievent + " node:"+node);
            
        } else if(SERVICE_PROBLEM_RESOLVED.equals(ievent.getUei())) {
            log.debug("handleEvent script received SERVICE_PROBLEM_RESOLVED event:" + ievent + " node:"+node);

        } 

    }

    public void updateServiceProblem(IEvent ievent) {

        if(! SERVICE_PROBLEM.equals(ievent.getUei())){
            return;
        }
        
        try {
            log.debug("updateServiceProblem script received immutable event:" + ievent);
            
            Event event = Event.copyFrom(ievent);
            Integer eventId = event.getDbid();
            AlarmData alarmData = (AlarmData) event.getAlarmData();
            String reductionKey = (alarmData==null) ? null : alarmData.getReductionKey();
            String description = event.getDescr();
            Logmsg logmsg = event.getLogmsg();
            String logmsgStr=  (logmsg == null) ? null : logmsg.getContent();
            String uei = event.getUei();
            String businessServiceName = (event.getParm("businessServiceName") == null) ? "Undefined" : event.getParm("businessServiceName").getValue().getContent();
            String businessServiceId = (event.getParm("businessServiceId") == null) ? null : event.getParm("businessServiceId").getValue().getContent();
            String rootCause = (event.getParm("rootCause") == null) ? null : event.getParm("rootCause").getValue().getContent();
            
            /* may be in messages after reply update */
            String href = (event.getParm("spmHREF") == null) ? null : event.getParm("spmHREF").getValue().getContent();
            String id = (event.getParm("spmID") == null) ? null : event.getParm("spmID").getValue().getContent();

            /* only create new alarm if href not present */
            if (href == null) {
                log.debug("updateServiceProblem event has no spmHREF param - creating new service problem");
                
                String originatingSystem = "opennms";
                String category = " equipment";
                String priority = "1";
                String reason = logmsgStr;
                String correlationId = reductionKey;
                String[] affectedServices = { businessServiceName };

                /* create new service problem for each url */
                if (m_urlCredentials.size() == 0) {
                    log.warn("no baseUrls set. Cannot send service problem.");
                }

                /* send message to all registered spm servers */
                for(urlCredential : m_urlCredentials) {
                    String baseUrl = urlCredential.getUrl();
                    String username = urlCredential.getUsername();
                    String password = urlCredential.getPassword();

                    try {

                        serviceProblem = createMinimalServiceProblem(
                                originatingSystem,
                                category,
                                priority,
                                description,
                                reason,
                                correlationId,
                                affectedServices
                                );
                        log.debug("updateServiceProblem sending service problem : " + serviceProblem.toString());
                        String url = baseUrl + "/tmf-api/serviceProblemManagement/v3/serviceProblem";

                        /* post http request */
                        m_scriptedClient.postRequest(url, serviceProblem.toString(), username, password);

                    } catch (Exception e2) {
                        log.error("problem posting new service problem ", e2);
                    }

                }
            } else {
               log.debug("updateServiceProblem not creating new service problem as event has spmHREF="+href);
            }

        } catch (Exception e) {
            log.debug("problem creating service problem",e);
        }

    }


    public synchronized void handleReturnMessage(JSONObject message) {
        
        log.debug("handleReturnMessage called,  message="+message);
        
        String requestMethod = message.get("requestMethod").toString();
        String requestHost = message.get("requestHost").toString();
        String requestPath = message.get("requestPath").toString();
        String status = message.get("status").toString();
        JSONObject jsonobject = (JSONObject) message.get("jsonobject");
        JSONArray jsonarray = (JSONArray) message.get("jsonarray");

        /* possible replies */
        /* POST /tmf-api/serviceProblemManagement/v3/serviceProblem */
        /* PATCH /tmf-api/serviceProblemManagement/v3/serviceProblem/2 */
        /* DELETE /tmf-api/serviceProblemManagement/v3/serviceProblem/2 */

        if ("200".equals(status) || "201".equals(status) || "204".equals(status)) {
            /* find out what message replied to */

            /*
             * check for reply to POST /tmf-api/serviceProblemManagement/v3/serviceProblem
             */
            if (requestPath != null && requestPath.contains("/tmf-api/serviceProblemManagement/v3/serviceProblem")
                    && "POST".equals(requestMethod) && jsonobject != null) {

                String id = (String) jsonobject.get("id");
                String correlationId = (String) jsonobject.get("correlationId");
                String href = (String) jsonobject.get("href");
                String uei =SERVICE_PROBLEM_REPLY;
                String source = "spm-inteface";
                String reason = (String) jsonobject.get("reason");
                
                EventBuilder eventBuilder = new EventBuilder(uei,source);
                /* this will add the initial correlation id to the event */
                eventBuilder.addParam("spmCorrelationId", correlationId);
                /* this will add the service problem id to the event */
                eventBuilder.addParam("spmID", id);
                /* this will add the service problem href to the event */
                eventBuilder.addParam("spmHREF", href);
                /* this will add the service problem reason to the event */
                eventBuilder.addParam("spmReason", reason);

                Event event = eventBuilder.getEvent();
                log.debug("Sending event spmID="+id+" event:" +event.toString());

                try {
                  EventIpcManagerFactory.getIpcManager().sendNow(event);
                  log.debug("sent SERVICE_PROBLEM_REPLY event through ipcManager");
                } catch (Throwable t) {
                    log.debug("problem sending event :",t);
                }

            } else {
                /* just log reply from any other method or request */
                log.debug("unused reply from SPM interface: " + message.toString());
            }

        } else {
            /* create event for error reply */
            log.debug("Error Reply from SPM interface: " + message.toString());
        }

    }
    
        
    /* returns this beanshell declaration so that its methods can be invoked */
    return this;

}
