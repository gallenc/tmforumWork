/*
 * Service Problem Management
 * ## TMF API Reference: TMF656 - Service Problem Management  ### Release : 18.5 - December 2018  Service Problem Management API goal is to provide the ability to manage problems in the Service domain.   ### Resource  - serviceProblem  ### Operations Service Problem Management API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ServiceProblemRef;
import io.swagger.client.model.TrackingRecord;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Task resource that requests acknowledgement of problems by the problem handler. Skipped properties: id,href
 */
@ApiModel(description = "Task resource that requests acknowledgement of problems by the problem handler. Skipped properties: id,href")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-06T18:52:03.826Z")
public class ProblemAcknowledgementCreate {
  @SerializedName("ackProblem")
  private List<ServiceProblemRef> ackProblem = null;

  @SerializedName("problem")
  private List<ServiceProblemRef> problem = new ArrayList<ServiceProblemRef>();

  @SerializedName("trackingRecord")
  private TrackingRecord trackingRecord = null;

  @SerializedName("@baseType")
  private String baseType = null;

  @SerializedName("@schemaLocation")
  private String schemaLocation = null;

  @SerializedName("@type")
  private String type = null;

  public ProblemAcknowledgementCreate ackProblem(List<ServiceProblemRef> ackProblem) {
    this.ackProblem = ackProblem;
    return this;
  }

  public ProblemAcknowledgementCreate addAckProblemItem(ServiceProblemRef ackProblemItem) {
    if (this.ackProblem == null) {
      this.ackProblem = new ArrayList<ServiceProblemRef>();
    }
    this.ackProblem.add(ackProblemItem);
    return this;
  }

   /**
   * The problems that were acknowledged, populated in the output to this task
   * @return ackProblem
  **/
  @ApiModelProperty(value = "The problems that were acknowledged, populated in the output to this task")
  public List<ServiceProblemRef> getAckProblem() {
    return ackProblem;
  }

  public void setAckProblem(List<ServiceProblemRef> ackProblem) {
    this.ackProblem = ackProblem;
  }

  public ProblemAcknowledgementCreate problem(List<ServiceProblemRef> problem) {
    this.problem = problem;
    return this;
  }

  public ProblemAcknowledgementCreate addProblemItem(ServiceProblemRef problemItem) {
    this.problem.add(problemItem);
    return this;
  }

   /**
   * The problems to be acknowledged, relevant in the input to this task
   * @return problem
  **/
  @ApiModelProperty(required = true, value = "The problems to be acknowledged, relevant in the input to this task")
  public List<ServiceProblemRef> getProblem() {
    return problem;
  }

  public void setProblem(List<ServiceProblemRef> problem) {
    this.problem = problem;
  }

  public ProblemAcknowledgementCreate trackingRecord(TrackingRecord trackingRecord) {
    this.trackingRecord = trackingRecord;
    return this;
  }

   /**
   * A record of the action taken in this acknowledgement
   * @return trackingRecord
  **/
  @ApiModelProperty(value = "A record of the action taken in this acknowledgement")
  public TrackingRecord getTrackingRecord() {
    return trackingRecord;
  }

  public void setTrackingRecord(TrackingRecord trackingRecord) {
    this.trackingRecord = trackingRecord;
  }

  public ProblemAcknowledgementCreate baseType(String baseType) {
    this.baseType = baseType;
    return this;
  }

   /**
   * When sub-classing, this defines the super-class
   * @return baseType
  **/
  @ApiModelProperty(value = "When sub-classing, this defines the super-class")
  public String getBaseType() {
    return baseType;
  }

  public void setBaseType(String baseType) {
    this.baseType = baseType;
  }

  public ProblemAcknowledgementCreate schemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
    return this;
  }

   /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return schemaLocation
  **/
  @ApiModelProperty(value = "A URI to a JSON-Schema file that defines additional attributes and relationships")
  public String getSchemaLocation() {
    return schemaLocation;
  }

  public void setSchemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
  }

  public ProblemAcknowledgementCreate type(String type) {
    this.type = type;
    return this;
  }

   /**
   * When sub-classing, this defines the sub-class entity name
   * @return type
  **/
  @ApiModelProperty(value = "When sub-classing, this defines the sub-class entity name")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemAcknowledgementCreate problemAcknowledgementCreate = (ProblemAcknowledgementCreate) o;
    return Objects.equals(this.ackProblem, problemAcknowledgementCreate.ackProblem) &&
        Objects.equals(this.problem, problemAcknowledgementCreate.problem) &&
        Objects.equals(this.trackingRecord, problemAcknowledgementCreate.trackingRecord) &&
        Objects.equals(this.baseType, problemAcknowledgementCreate.baseType) &&
        Objects.equals(this.schemaLocation, problemAcknowledgementCreate.schemaLocation) &&
        Objects.equals(this.type, problemAcknowledgementCreate.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackProblem, problem, trackingRecord, baseType, schemaLocation, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemAcknowledgementCreate {\n");
    
    sb.append("    ackProblem: ").append(toIndentedString(ackProblem)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("    trackingRecord: ").append(toIndentedString(trackingRecord)).append("\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

