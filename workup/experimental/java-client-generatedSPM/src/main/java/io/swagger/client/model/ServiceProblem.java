/*
 * Service Problem Management
 * ## TMF API Reference: TMF656 - Service Problem Management  ### Release : 18.5 - December 2018  Service Problem Management API goal is to provide the ability to manage problems in the Service domain.   ### Resource  - serviceProblem  ### Operations Service Problem Management API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Characteristic;
import io.swagger.client.model.EventRef;
import io.swagger.client.model.ImpactPattern;
import io.swagger.client.model.Note;
import io.swagger.client.model.Place;
import io.swagger.client.model.RelatedEntityRef;
import io.swagger.client.model.RelatedParty;
import io.swagger.client.model.ResourceAlarmRef;
import io.swagger.client.model.ResourceRef;
import io.swagger.client.model.SLAViolationRef;
import io.swagger.client.model.ServiceProblemRef;
import io.swagger.client.model.ServiceRef;
import io.swagger.client.model.TrackingRecord;
import io.swagger.client.model.TroubleTicketRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * The problem information for Middle B which is abstracted in the service layer from the issued event information by First B
 */
@ApiModel(description = "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-06T18:52:03.826Z")
public class ServiceProblem {
  @SerializedName("id")
  private String id = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("affectedNumberOfServices")
  private Integer affectedNumberOfServices = null;

  @SerializedName("category")
  private String category = null;

  @SerializedName("correlationId")
  private String correlationId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("impactImportanceFactor")
  private String impactImportanceFactor = null;

  @SerializedName("originatingSystem")
  private String originatingSystem = null;

  @SerializedName("priority")
  private Integer priority = null;

  @SerializedName("problemEscalation")
  private String problemEscalation = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("resolutionDate")
  private OffsetDateTime resolutionDate = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("statusChangeDate")
  private OffsetDateTime statusChangeDate = null;

  @SerializedName("statusChangeReason")
  private String statusChangeReason = null;

  @SerializedName("timeChanged")
  private OffsetDateTime timeChanged = null;

  @SerializedName("timeRaised")
  private OffsetDateTime timeRaised = null;

  @SerializedName("affectedLocation")
  private List<Place> affectedLocation = null;

  @SerializedName("affectedResource")
  private List<ResourceRef> affectedResource = null;

  @SerializedName("affectedService")
  private List<ServiceRef> affectedService = null;

  @SerializedName("associatedSLAViolation")
  private List<SLAViolationRef> associatedSLAViolation = null;

  @SerializedName("associatedTroubleTicket")
  private List<TroubleTicketRef> associatedTroubleTicket = null;

  @SerializedName("comment")
  private List<Note> comment = null;

  @SerializedName("extensionInfo")
  private List<Characteristic> extensionInfo = null;

  @SerializedName("firstAlert")
  private RelatedEntityRef firstAlert = null;

  @SerializedName("impactPatterns")
  private ImpactPattern impactPatterns = null;

  @SerializedName("originatorParty")
  private RelatedParty originatorParty = null;

  @SerializedName("parentProblem")
  private List<ServiceProblemRef> parentProblem = null;

  @SerializedName("relatedEvent")
  private List<EventRef> relatedEvent = null;

  @SerializedName("relatedObject")
  private List<RelatedEntityRef> relatedObject = null;

  @SerializedName("relatedParty")
  private List<RelatedParty> relatedParty = null;

  @SerializedName("responsibleParty")
  private RelatedParty responsibleParty = null;

  @SerializedName("rootCauseResource")
  private List<ResourceRef> rootCauseResource = null;

  @SerializedName("rootCauseService")
  private List<ServiceRef> rootCauseService = null;

  @SerializedName("trackingRecord")
  private List<TrackingRecord> trackingRecord = null;

  @SerializedName("underlyingAlarm")
  private List<ResourceAlarmRef> underlyingAlarm = null;

  @SerializedName("underlyingProblem")
  private List<ServiceProblemRef> underlyingProblem = null;

  @SerializedName("@baseType")
  private String baseType = null;

  @SerializedName("@schemaLocation")
  private String schemaLocation = null;

  @SerializedName("@type")
  private String type = null;

  public ServiceProblem id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the service problem
   * @return id
  **/
  @ApiModelProperty(value = "Identifier of the service problem")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ServiceProblem href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Reference to the Service Problem
   * @return href
  **/
  @ApiModelProperty(value = "Reference to the Service Problem")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public ServiceProblem affectedNumberOfServices(Integer affectedNumberOfServices) {
    this.affectedNumberOfServices = affectedNumberOfServices;
    return this;
  }

   /**
   * Number of affected services
   * @return affectedNumberOfServices
  **/
  @ApiModelProperty(value = "Number of affected services")
  public Integer getAffectedNumberOfServices() {
    return affectedNumberOfServices;
  }

  public void setAffectedNumberOfServices(Integer affectedNumberOfServices) {
    this.affectedNumberOfServices = affectedNumberOfServices;
  }

  public ServiceProblem category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated
   * @return category
  **/
  @ApiModelProperty(value = "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public ServiceProblem correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Additional identifier coming from an external system
   * @return correlationId
  **/
  @ApiModelProperty(value = "Additional identifier coming from an external system")
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }

  public ServiceProblem description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Free form text describing the Service Problem
   * @return description
  **/
  @ApiModelProperty(value = "Free form text describing the Service Problem")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ServiceProblem impactImportanceFactor(String impactImportanceFactor) {
    this.impactImportanceFactor = impactImportanceFactor;
    return this;
  }

   /**
   * Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact.
   * @return impactImportanceFactor
  **/
  @ApiModelProperty(value = "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact.")
  public String getImpactImportanceFactor() {
    return impactImportanceFactor;
  }

  public void setImpactImportanceFactor(String impactImportanceFactor) {
    this.impactImportanceFactor = impactImportanceFactor;
  }

  public ServiceProblem originatingSystem(String originatingSystem) {
    this.originatingSystem = originatingSystem;
    return this;
  }

   /**
   * Indicates where the problem was generated
   * @return originatingSystem
  **/
  @ApiModelProperty(value = "Indicates where the problem was generated")
  public String getOriginatingSystem() {
    return originatingSystem;
  }

  public void setOriginatingSystem(String originatingSystem) {
    this.originatingSystem = originatingSystem;
  }

  public ServiceProblem priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem.
   * @return priority
  **/
  @ApiModelProperty(value = "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem.")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public ServiceProblem problemEscalation(String problemEscalation) {
    this.problemEscalation = problemEscalation;
    return this;
  }

   /**
   * Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation.
   * @return problemEscalation
  **/
  @ApiModelProperty(value = "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation.")
  public String getProblemEscalation() {
    return problemEscalation;
  }

  public void setProblemEscalation(String problemEscalation) {
    this.problemEscalation = problemEscalation;
  }

  public ServiceProblem reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Free text or optionally structured text. It can be Unknown.
   * @return reason
  **/
  @ApiModelProperty(value = "Free text or optionally structured text. It can be Unknown.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ServiceProblem resolutionDate(OffsetDateTime resolutionDate) {
    this.resolutionDate = resolutionDate;
    return this;
  }

   /**
   * Time the problem was resolved
   * @return resolutionDate
  **/
  @ApiModelProperty(value = "Time the problem was resolved")
  public OffsetDateTime getResolutionDate() {
    return resolutionDate;
  }

  public void setResolutionDate(OffsetDateTime resolutionDate) {
    this.resolutionDate = resolutionDate;
  }

  public ServiceProblem status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled.
   * @return status
  **/
  @ApiModelProperty(value = "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ServiceProblem statusChangeDate(OffsetDateTime statusChangeDate) {
    this.statusChangeDate = statusChangeDate;
    return this;
  }

   /**
   * Time the problem was last status changed
   * @return statusChangeDate
  **/
  @ApiModelProperty(value = "Time the problem was last status changed")
  public OffsetDateTime getStatusChangeDate() {
    return statusChangeDate;
  }

  public void setStatusChangeDate(OffsetDateTime statusChangeDate) {
    this.statusChangeDate = statusChangeDate;
  }

  public ServiceProblem statusChangeReason(String statusChangeReason) {
    this.statusChangeReason = statusChangeReason;
    return this;
  }

   /**
   * The reason of state change
   * @return statusChangeReason
  **/
  @ApiModelProperty(value = "The reason of state change")
  public String getStatusChangeReason() {
    return statusChangeReason;
  }

  public void setStatusChangeReason(String statusChangeReason) {
    this.statusChangeReason = statusChangeReason;
  }

  public ServiceProblem timeChanged(OffsetDateTime timeChanged) {
    this.timeChanged = timeChanged;
    return this;
  }

   /**
   * Time the problem was last changed
   * @return timeChanged
  **/
  @ApiModelProperty(value = "Time the problem was last changed")
  public OffsetDateTime getTimeChanged() {
    return timeChanged;
  }

  public void setTimeChanged(OffsetDateTime timeChanged) {
    this.timeChanged = timeChanged;
  }

  public ServiceProblem timeRaised(OffsetDateTime timeRaised) {
    this.timeRaised = timeRaised;
    return this;
  }

   /**
   * Time the problem was raised
   * @return timeRaised
  **/
  @ApiModelProperty(value = "Time the problem was raised")
  public OffsetDateTime getTimeRaised() {
    return timeRaised;
  }

  public void setTimeRaised(OffsetDateTime timeRaised) {
    this.timeRaised = timeRaised;
  }

  public ServiceProblem affectedLocation(List<Place> affectedLocation) {
    this.affectedLocation = affectedLocation;
    return this;
  }

  public ServiceProblem addAffectedLocationItem(Place affectedLocationItem) {
    if (this.affectedLocation == null) {
      this.affectedLocation = new ArrayList<Place>();
    }
    this.affectedLocation.add(affectedLocationItem);
    return this;
  }

   /**
   * A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.
   * @return affectedLocation
  **/
  @ApiModelProperty(value = "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.")
  public List<Place> getAffectedLocation() {
    return affectedLocation;
  }

  public void setAffectedLocation(List<Place> affectedLocation) {
    this.affectedLocation = affectedLocation;
  }

  public ServiceProblem affectedResource(List<ResourceRef> affectedResource) {
    this.affectedResource = affectedResource;
    return this;
  }

  public ServiceProblem addAffectedResourceItem(ResourceRef affectedResourceItem) {
    if (this.affectedResource == null) {
      this.affectedResource = new ArrayList<ResourceRef>();
    }
    this.affectedResource.add(affectedResourceItem);
    return this;
  }

   /**
   * A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.
   * @return affectedResource
  **/
  @ApiModelProperty(value = "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.")
  public List<ResourceRef> getAffectedResource() {
    return affectedResource;
  }

  public void setAffectedResource(List<ResourceRef> affectedResource) {
    this.affectedResource = affectedResource;
  }

  public ServiceProblem affectedService(List<ServiceRef> affectedService) {
    this.affectedService = affectedService;
    return this;
  }

  public ServiceProblem addAffectedServiceItem(ServiceRef affectedServiceItem) {
    if (this.affectedService == null) {
      this.affectedService = new ArrayList<ServiceRef>();
    }
    this.affectedService.add(affectedServiceItem);
    return this;
  }

   /**
   * List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present.
   * @return affectedService
  **/
  @ApiModelProperty(value = "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present.")
  public List<ServiceRef> getAffectedService() {
    return affectedService;
  }

  public void setAffectedService(List<ServiceRef> affectedService) {
    this.affectedService = affectedService;
  }

  public ServiceProblem associatedSLAViolation(List<SLAViolationRef> associatedSLAViolation) {
    this.associatedSLAViolation = associatedSLAViolation;
    return this;
  }

  public ServiceProblem addAssociatedSLAViolationItem(SLAViolationRef associatedSLAViolationItem) {
    if (this.associatedSLAViolation == null) {
      this.associatedSLAViolation = new ArrayList<SLAViolationRef>();
    }
    this.associatedSLAViolation.add(associatedSLAViolationItem);
    return this;
  }

   /**
   * A List of SLA violations associated with this problem.
   * @return associatedSLAViolation
  **/
  @ApiModelProperty(value = "A List of SLA violations associated with this problem.")
  public List<SLAViolationRef> getAssociatedSLAViolation() {
    return associatedSLAViolation;
  }

  public void setAssociatedSLAViolation(List<SLAViolationRef> associatedSLAViolation) {
    this.associatedSLAViolation = associatedSLAViolation;
  }

  public ServiceProblem associatedTroubleTicket(List<TroubleTicketRef> associatedTroubleTicket) {
    this.associatedTroubleTicket = associatedTroubleTicket;
    return this;
  }

  public ServiceProblem addAssociatedTroubleTicketItem(TroubleTicketRef associatedTroubleTicketItem) {
    if (this.associatedTroubleTicket == null) {
      this.associatedTroubleTicket = new ArrayList<TroubleTicketRef>();
    }
    this.associatedTroubleTicket.add(associatedTroubleTicketItem);
    return this;
  }

   /**
   * A list of trouble tickets associated with this problem.
   * @return associatedTroubleTicket
  **/
  @ApiModelProperty(value = "A list of trouble tickets associated with this problem.")
  public List<TroubleTicketRef> getAssociatedTroubleTicket() {
    return associatedTroubleTicket;
  }

  public void setAssociatedTroubleTicket(List<TroubleTicketRef> associatedTroubleTicket) {
    this.associatedTroubleTicket = associatedTroubleTicket;
  }

  public ServiceProblem comment(List<Note> comment) {
    this.comment = comment;
    return this;
  }

  public ServiceProblem addCommentItem(Note commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<Note>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * A list of comments or notes made on the problem
   * @return comment
  **/
  @ApiModelProperty(value = "A list of comments or notes made on the problem")
  public List<Note> getComment() {
    return comment;
  }

  public void setComment(List<Note> comment) {
    this.comment = comment;
  }

  public ServiceProblem extensionInfo(List<Characteristic> extensionInfo) {
    this.extensionInfo = extensionInfo;
    return this;
  }

  public ServiceProblem addExtensionInfoItem(Characteristic extensionInfoItem) {
    if (this.extensionInfo == null) {
      this.extensionInfo = new ArrayList<Characteristic>();
    }
    this.extensionInfo.add(extensionInfoItem);
    return this;
  }

   /**
   * A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces
   * @return extensionInfo
  **/
  @ApiModelProperty(value = "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces")
  public List<Characteristic> getExtensionInfo() {
    return extensionInfo;
  }

  public void setExtensionInfo(List<Characteristic> extensionInfo) {
    this.extensionInfo = extensionInfo;
  }

  public ServiceProblem firstAlert(RelatedEntityRef firstAlert) {
    this.firstAlert = firstAlert;
    return this;
  }

   /**
   * Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert
   * @return firstAlert
  **/
  @ApiModelProperty(value = "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert")
  public RelatedEntityRef getFirstAlert() {
    return firstAlert;
  }

  public void setFirstAlert(RelatedEntityRef firstAlert) {
    this.firstAlert = firstAlert;
  }

  public ServiceProblem impactPatterns(ImpactPattern impactPatterns) {
    this.impactPatterns = impactPatterns;
    return this;
  }

   /**
   * Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes.
   * @return impactPatterns
  **/
  @ApiModelProperty(value = "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes.")
  public ImpactPattern getImpactPatterns() {
    return impactPatterns;
  }

  public void setImpactPatterns(ImpactPattern impactPatterns) {
    this.impactPatterns = impactPatterns;
  }

  public ServiceProblem originatorParty(RelatedParty originatorParty) {
    this.originatorParty = originatorParty;
    return this;
  }

   /**
   * Individual or organization that created the problem
   * @return originatorParty
  **/
  @ApiModelProperty(value = "Individual or organization that created the problem")
  public RelatedParty getOriginatorParty() {
    return originatorParty;
  }

  public void setOriginatorParty(RelatedParty originatorParty) {
    this.originatorParty = originatorParty;
  }

  public ServiceProblem parentProblem(List<ServiceProblemRef> parentProblem) {
    this.parentProblem = parentProblem;
    return this;
  }

  public ServiceProblem addParentProblemItem(ServiceProblemRef parentProblemItem) {
    if (this.parentProblem == null) {
      this.parentProblem = new ArrayList<ServiceProblemRef>();
    }
    this.parentProblem.add(parentProblemItem);
    return this;
  }

   /**
   * The parent problem to which this problem is attached.
   * @return parentProblem
  **/
  @ApiModelProperty(value = "The parent problem to which this problem is attached.")
  public List<ServiceProblemRef> getParentProblem() {
    return parentProblem;
  }

  public void setParentProblem(List<ServiceProblemRef> parentProblem) {
    this.parentProblem = parentProblem;
  }

  public ServiceProblem relatedEvent(List<EventRef> relatedEvent) {
    this.relatedEvent = relatedEvent;
    return this;
  }

  public ServiceProblem addRelatedEventItem(EventRef relatedEventItem) {
    if (this.relatedEvent == null) {
      this.relatedEvent = new ArrayList<EventRef>();
    }
    this.relatedEvent.add(relatedEventItem);
    return this;
  }

   /**
   * List of events associated to this problem
   * @return relatedEvent
  **/
  @ApiModelProperty(value = "List of events associated to this problem")
  public List<EventRef> getRelatedEvent() {
    return relatedEvent;
  }

  public void setRelatedEvent(List<EventRef> relatedEvent) {
    this.relatedEvent = relatedEvent;
  }

  public ServiceProblem relatedObject(List<RelatedEntityRef> relatedObject) {
    this.relatedObject = relatedObject;
    return this;
  }

  public ServiceProblem addRelatedObjectItem(RelatedEntityRef relatedObjectItem) {
    if (this.relatedObject == null) {
      this.relatedObject = new ArrayList<RelatedEntityRef>();
    }
    this.relatedObject.add(relatedObjectItem);
    return this;
  }

   /**
   * List of objects associated to this problem
   * @return relatedObject
  **/
  @ApiModelProperty(value = "List of objects associated to this problem")
  public List<RelatedEntityRef> getRelatedObject() {
    return relatedObject;
  }

  public void setRelatedObject(List<RelatedEntityRef> relatedObject) {
    this.relatedObject = relatedObject;
  }

  public ServiceProblem relatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  public ServiceProblem addRelatedPartyItem(RelatedParty relatedPartyItem) {
    if (this.relatedParty == null) {
      this.relatedParty = new ArrayList<RelatedParty>();
    }
    this.relatedParty.add(relatedPartyItem);
    return this;
  }

   /**
   * List of parties or party roles playing a role within the service problem
   * @return relatedParty
  **/
  @ApiModelProperty(value = "List of parties or party roles playing a role within the service problem")
  public List<RelatedParty> getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(List<RelatedParty> relatedParty) {
    this.relatedParty = relatedParty;
  }

  public ServiceProblem responsibleParty(RelatedParty responsibleParty) {
    this.responsibleParty = responsibleParty;
    return this;
  }

   /**
   * Individual or organization responsible for handling this problem
   * @return responsibleParty
  **/
  @ApiModelProperty(value = "Individual or organization responsible for handling this problem")
  public RelatedParty getResponsibleParty() {
    return responsibleParty;
  }

  public void setResponsibleParty(RelatedParty responsibleParty) {
    this.responsibleParty = responsibleParty;
  }

  public ServiceProblem rootCauseResource(List<ResourceRef> rootCauseResource) {
    this.rootCauseResource = rootCauseResource;
    return this;
  }

  public ServiceProblem addRootCauseResourceItem(ResourceRef rootCauseResourceItem) {
    if (this.rootCauseResource == null) {
      this.rootCauseResource = new ArrayList<ResourceRef>();
    }
    this.rootCauseResource.add(rootCauseResourceItem);
    return this;
  }

   /**
   * Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable).
   * @return rootCauseResource
  **/
  @ApiModelProperty(value = "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable).")
  public List<ResourceRef> getRootCauseResource() {
    return rootCauseResource;
  }

  public void setRootCauseResource(List<ResourceRef> rootCauseResource) {
    this.rootCauseResource = rootCauseResource;
  }

  public ServiceProblem rootCauseService(List<ServiceRef> rootCauseService) {
    this.rootCauseService = rootCauseService;
    return this;
  }

  public ServiceProblem addRootCauseServiceItem(ServiceRef rootCauseServiceItem) {
    if (this.rootCauseService == null) {
      this.rootCauseService = new ArrayList<ServiceRef>();
    }
    this.rootCauseService.add(rootCauseServiceItem);
    return this;
  }

   /**
   * Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)
   * @return rootCauseService
  **/
  @ApiModelProperty(value = "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)")
  public List<ServiceRef> getRootCauseService() {
    return rootCauseService;
  }

  public void setRootCauseService(List<ServiceRef> rootCauseService) {
    this.rootCauseService = rootCauseService;
  }

  public ServiceProblem trackingRecord(List<TrackingRecord> trackingRecord) {
    this.trackingRecord = trackingRecord;
    return this;
  }

  public ServiceProblem addTrackingRecordItem(TrackingRecord trackingRecordItem) {
    if (this.trackingRecord == null) {
      this.trackingRecord = new ArrayList<TrackingRecord>();
    }
    this.trackingRecord.add(trackingRecordItem);
    return this;
  }

   /**
   * List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records
   * @return trackingRecord
  **/
  @ApiModelProperty(value = "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records")
  public List<TrackingRecord> getTrackingRecord() {
    return trackingRecord;
  }

  public void setTrackingRecord(List<TrackingRecord> trackingRecord) {
    this.trackingRecord = trackingRecord;
  }

  public ServiceProblem underlyingAlarm(List<ResourceAlarmRef> underlyingAlarm) {
    this.underlyingAlarm = underlyingAlarm;
    return this;
  }

  public ServiceProblem addUnderlyingAlarmItem(ResourceAlarmRef underlyingAlarmItem) {
    if (this.underlyingAlarm == null) {
      this.underlyingAlarm = new ArrayList<ResourceAlarmRef>();
    }
    this.underlyingAlarm.add(underlyingAlarmItem);
    return this;
  }

   /**
   * A list of alarms underlying this problem.
   * @return underlyingAlarm
  **/
  @ApiModelProperty(value = "A list of alarms underlying this problem.")
  public List<ResourceAlarmRef> getUnderlyingAlarm() {
    return underlyingAlarm;
  }

  public void setUnderlyingAlarm(List<ResourceAlarmRef> underlyingAlarm) {
    this.underlyingAlarm = underlyingAlarm;
  }

  public ServiceProblem underlyingProblem(List<ServiceProblemRef> underlyingProblem) {
    this.underlyingProblem = underlyingProblem;
    return this;
  }

  public ServiceProblem addUnderlyingProblemItem(ServiceProblemRef underlyingProblemItem) {
    if (this.underlyingProblem == null) {
      this.underlyingProblem = new ArrayList<ServiceProblemRef>();
    }
    this.underlyingProblem.add(underlyingProblemItem);
    return this;
  }

   /**
   * A list of underlying problems. Relevant only if this problem is derived from other problems.
   * @return underlyingProblem
  **/
  @ApiModelProperty(value = "A list of underlying problems. Relevant only if this problem is derived from other problems.")
  public List<ServiceProblemRef> getUnderlyingProblem() {
    return underlyingProblem;
  }

  public void setUnderlyingProblem(List<ServiceProblemRef> underlyingProblem) {
    this.underlyingProblem = underlyingProblem;
  }

  public ServiceProblem baseType(String baseType) {
    this.baseType = baseType;
    return this;
  }

   /**
   * When sub-classing, this defines the super-class
   * @return baseType
  **/
  @ApiModelProperty(value = "When sub-classing, this defines the super-class")
  public String getBaseType() {
    return baseType;
  }

  public void setBaseType(String baseType) {
    this.baseType = baseType;
  }

  public ServiceProblem schemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
    return this;
  }

   /**
   * A URI to a JSON-Schema file that defines additional attributes and relationships
   * @return schemaLocation
  **/
  @ApiModelProperty(value = "A URI to a JSON-Schema file that defines additional attributes and relationships")
  public String getSchemaLocation() {
    return schemaLocation;
  }

  public void setSchemaLocation(String schemaLocation) {
    this.schemaLocation = schemaLocation;
  }

  public ServiceProblem type(String type) {
    this.type = type;
    return this;
  }

   /**
   * When sub-classing, this defines the sub-class entity name
   * @return type
  **/
  @ApiModelProperty(value = "When sub-classing, this defines the sub-class entity name")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProblem serviceProblem = (ServiceProblem) o;
    return Objects.equals(this.id, serviceProblem.id) &&
        Objects.equals(this.href, serviceProblem.href) &&
        Objects.equals(this.affectedNumberOfServices, serviceProblem.affectedNumberOfServices) &&
        Objects.equals(this.category, serviceProblem.category) &&
        Objects.equals(this.correlationId, serviceProblem.correlationId) &&
        Objects.equals(this.description, serviceProblem.description) &&
        Objects.equals(this.impactImportanceFactor, serviceProblem.impactImportanceFactor) &&
        Objects.equals(this.originatingSystem, serviceProblem.originatingSystem) &&
        Objects.equals(this.priority, serviceProblem.priority) &&
        Objects.equals(this.problemEscalation, serviceProblem.problemEscalation) &&
        Objects.equals(this.reason, serviceProblem.reason) &&
        Objects.equals(this.resolutionDate, serviceProblem.resolutionDate) &&
        Objects.equals(this.status, serviceProblem.status) &&
        Objects.equals(this.statusChangeDate, serviceProblem.statusChangeDate) &&
        Objects.equals(this.statusChangeReason, serviceProblem.statusChangeReason) &&
        Objects.equals(this.timeChanged, serviceProblem.timeChanged) &&
        Objects.equals(this.timeRaised, serviceProblem.timeRaised) &&
        Objects.equals(this.affectedLocation, serviceProblem.affectedLocation) &&
        Objects.equals(this.affectedResource, serviceProblem.affectedResource) &&
        Objects.equals(this.affectedService, serviceProblem.affectedService) &&
        Objects.equals(this.associatedSLAViolation, serviceProblem.associatedSLAViolation) &&
        Objects.equals(this.associatedTroubleTicket, serviceProblem.associatedTroubleTicket) &&
        Objects.equals(this.comment, serviceProblem.comment) &&
        Objects.equals(this.extensionInfo, serviceProblem.extensionInfo) &&
        Objects.equals(this.firstAlert, serviceProblem.firstAlert) &&
        Objects.equals(this.impactPatterns, serviceProblem.impactPatterns) &&
        Objects.equals(this.originatorParty, serviceProblem.originatorParty) &&
        Objects.equals(this.parentProblem, serviceProblem.parentProblem) &&
        Objects.equals(this.relatedEvent, serviceProblem.relatedEvent) &&
        Objects.equals(this.relatedObject, serviceProblem.relatedObject) &&
        Objects.equals(this.relatedParty, serviceProblem.relatedParty) &&
        Objects.equals(this.responsibleParty, serviceProblem.responsibleParty) &&
        Objects.equals(this.rootCauseResource, serviceProblem.rootCauseResource) &&
        Objects.equals(this.rootCauseService, serviceProblem.rootCauseService) &&
        Objects.equals(this.trackingRecord, serviceProblem.trackingRecord) &&
        Objects.equals(this.underlyingAlarm, serviceProblem.underlyingAlarm) &&
        Objects.equals(this.underlyingProblem, serviceProblem.underlyingProblem) &&
        Objects.equals(this.baseType, serviceProblem.baseType) &&
        Objects.equals(this.schemaLocation, serviceProblem.schemaLocation) &&
        Objects.equals(this.type, serviceProblem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, affectedNumberOfServices, category, correlationId, description, impactImportanceFactor, originatingSystem, priority, problemEscalation, reason, resolutionDate, status, statusChangeDate, statusChangeReason, timeChanged, timeRaised, affectedLocation, affectedResource, affectedService, associatedSLAViolation, associatedTroubleTicket, comment, extensionInfo, firstAlert, impactPatterns, originatorParty, parentProblem, relatedEvent, relatedObject, relatedParty, responsibleParty, rootCauseResource, rootCauseService, trackingRecord, underlyingAlarm, underlyingProblem, baseType, schemaLocation, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProblem {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    affectedNumberOfServices: ").append(toIndentedString(affectedNumberOfServices)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    impactImportanceFactor: ").append(toIndentedString(impactImportanceFactor)).append("\n");
    sb.append("    originatingSystem: ").append(toIndentedString(originatingSystem)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    problemEscalation: ").append(toIndentedString(problemEscalation)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    resolutionDate: ").append(toIndentedString(resolutionDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusChangeDate: ").append(toIndentedString(statusChangeDate)).append("\n");
    sb.append("    statusChangeReason: ").append(toIndentedString(statusChangeReason)).append("\n");
    sb.append("    timeChanged: ").append(toIndentedString(timeChanged)).append("\n");
    sb.append("    timeRaised: ").append(toIndentedString(timeRaised)).append("\n");
    sb.append("    affectedLocation: ").append(toIndentedString(affectedLocation)).append("\n");
    sb.append("    affectedResource: ").append(toIndentedString(affectedResource)).append("\n");
    sb.append("    affectedService: ").append(toIndentedString(affectedService)).append("\n");
    sb.append("    associatedSLAViolation: ").append(toIndentedString(associatedSLAViolation)).append("\n");
    sb.append("    associatedTroubleTicket: ").append(toIndentedString(associatedTroubleTicket)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    extensionInfo: ").append(toIndentedString(extensionInfo)).append("\n");
    sb.append("    firstAlert: ").append(toIndentedString(firstAlert)).append("\n");
    sb.append("    impactPatterns: ").append(toIndentedString(impactPatterns)).append("\n");
    sb.append("    originatorParty: ").append(toIndentedString(originatorParty)).append("\n");
    sb.append("    parentProblem: ").append(toIndentedString(parentProblem)).append("\n");
    sb.append("    relatedEvent: ").append(toIndentedString(relatedEvent)).append("\n");
    sb.append("    relatedObject: ").append(toIndentedString(relatedObject)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    responsibleParty: ").append(toIndentedString(responsibleParty)).append("\n");
    sb.append("    rootCauseResource: ").append(toIndentedString(rootCauseResource)).append("\n");
    sb.append("    rootCauseService: ").append(toIndentedString(rootCauseService)).append("\n");
    sb.append("    trackingRecord: ").append(toIndentedString(trackingRecord)).append("\n");
    sb.append("    underlyingAlarm: ").append(toIndentedString(underlyingAlarm)).append("\n");
    sb.append("    underlyingProblem: ").append(toIndentedString(underlyingProblem)).append("\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    schemaLocation: ").append(toIndentedString(schemaLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

