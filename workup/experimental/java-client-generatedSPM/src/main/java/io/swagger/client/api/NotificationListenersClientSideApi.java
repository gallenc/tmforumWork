/*
 * Service Problem Management
 * ## TMF API Reference: TMF656 - Service Problem Management  ### Release : 18.5 - December 2018  Service Problem Management API goal is to provide the ability to manage problems in the Service domain.   ### Resource  - serviceProblem  ### Operations Service Problem Management API performs the following operations on the resource : - Retrieve an entity or a collection of entities depending on filter criteria - Partial update of an entity (including updating rules) - Create an entity (including default values and creation rules) - Delete an entity (for administration purposes) - Manage notification of events
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.EventSubscription;
import io.swagger.client.model.ServiceProblemAttributeValueChangeNotification;
import io.swagger.client.model.ServiceProblemCreateNotification;
import io.swagger.client.model.ServiceProblemInformationRequiredNotification;
import io.swagger.client.model.ServiceProblemStateChangeNotification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationListenersClientSideApi {
    private ApiClient apiClient;

    public NotificationListenersClientSideApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationListenersClientSideApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listenToServiceProblemAttributeValueChangeNotification
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemAttributeValueChangeNotificationCall(ServiceProblemAttributeValueChangeNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/serviceProblemAttributeValueChangeNotification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToServiceProblemAttributeValueChangeNotificationValidateBeforeCall(ServiceProblemAttributeValueChangeNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToServiceProblemAttributeValueChangeNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToServiceProblemAttributeValueChangeNotificationCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity ServiceProblemAttributeValueChangeNotification
     * Example of a client listener for receiving the notification ServiceProblemAttributeValueChangeNotification
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToServiceProblemAttributeValueChangeNotification(ServiceProblemAttributeValueChangeNotification data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToServiceProblemAttributeValueChangeNotificationWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity ServiceProblemAttributeValueChangeNotification
     * Example of a client listener for receiving the notification ServiceProblemAttributeValueChangeNotification
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToServiceProblemAttributeValueChangeNotificationWithHttpInfo(ServiceProblemAttributeValueChangeNotification data) throws ApiException {
        com.squareup.okhttp.Call call = listenToServiceProblemAttributeValueChangeNotificationValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity ServiceProblemAttributeValueChangeNotification (asynchronously)
     * Example of a client listener for receiving the notification ServiceProblemAttributeValueChangeNotification
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemAttributeValueChangeNotificationAsync(ServiceProblemAttributeValueChangeNotification data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToServiceProblemAttributeValueChangeNotificationValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToServiceProblemCreateNotification
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemCreateNotificationCall(ServiceProblemCreateNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/serviceProblemCreateNotification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToServiceProblemCreateNotificationValidateBeforeCall(ServiceProblemCreateNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToServiceProblemCreateNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToServiceProblemCreateNotificationCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity ServiceProblemCreateNotification
     * Example of a client listener for receiving the notification ServiceProblemCreateNotification
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToServiceProblemCreateNotification(ServiceProblemCreateNotification data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToServiceProblemCreateNotificationWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity ServiceProblemCreateNotification
     * Example of a client listener for receiving the notification ServiceProblemCreateNotification
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToServiceProblemCreateNotificationWithHttpInfo(ServiceProblemCreateNotification data) throws ApiException {
        com.squareup.okhttp.Call call = listenToServiceProblemCreateNotificationValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity ServiceProblemCreateNotification (asynchronously)
     * Example of a client listener for receiving the notification ServiceProblemCreateNotification
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemCreateNotificationAsync(ServiceProblemCreateNotification data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToServiceProblemCreateNotificationValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToServiceProblemInformationRequiredNotification
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemInformationRequiredNotificationCall(ServiceProblemInformationRequiredNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/serviceProblemInformationRequiredNotification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToServiceProblemInformationRequiredNotificationValidateBeforeCall(ServiceProblemInformationRequiredNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToServiceProblemInformationRequiredNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToServiceProblemInformationRequiredNotificationCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity ServiceProblemInformationRequiredNotification
     * Example of a client listener for receiving the notification ServiceProblemInformationRequiredNotification
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToServiceProblemInformationRequiredNotification(ServiceProblemInformationRequiredNotification data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToServiceProblemInformationRequiredNotificationWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity ServiceProblemInformationRequiredNotification
     * Example of a client listener for receiving the notification ServiceProblemInformationRequiredNotification
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToServiceProblemInformationRequiredNotificationWithHttpInfo(ServiceProblemInformationRequiredNotification data) throws ApiException {
        com.squareup.okhttp.Call call = listenToServiceProblemInformationRequiredNotificationValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity ServiceProblemInformationRequiredNotification (asynchronously)
     * Example of a client listener for receiving the notification ServiceProblemInformationRequiredNotification
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemInformationRequiredNotificationAsync(ServiceProblemInformationRequiredNotification data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToServiceProblemInformationRequiredNotificationValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToServiceProblemStateChangeNotification
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemStateChangeNotificationCall(ServiceProblemStateChangeNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/serviceProblemStateChangeNotification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToServiceProblemStateChangeNotificationValidateBeforeCall(ServiceProblemStateChangeNotification data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToServiceProblemStateChangeNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToServiceProblemStateChangeNotificationCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity ServiceProblemStateChangeNotification
     * Example of a client listener for receiving the notification ServiceProblemStateChangeNotification
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToServiceProblemStateChangeNotification(ServiceProblemStateChangeNotification data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToServiceProblemStateChangeNotificationWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity ServiceProblemStateChangeNotification
     * Example of a client listener for receiving the notification ServiceProblemStateChangeNotification
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToServiceProblemStateChangeNotificationWithHttpInfo(ServiceProblemStateChangeNotification data) throws ApiException {
        com.squareup.okhttp.Call call = listenToServiceProblemStateChangeNotificationValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity ServiceProblemStateChangeNotification (asynchronously)
     * Example of a client listener for receiving the notification ServiceProblemStateChangeNotification
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToServiceProblemStateChangeNotificationAsync(ServiceProblemStateChangeNotification data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToServiceProblemStateChangeNotificationValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
