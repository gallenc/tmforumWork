{
    "swagger": "2.0", 
    "info": {
        "title": "Service Problem Management", 
        "description": "This is Swagger UI environment generated for the TMF Service Problem Management specification", 
        "version": "2.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/serviceProblemManagement/v2/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json"
    ], 
    "produces": [
        "application/json"
    ], 
    "paths": {
        "/serviceProblem": {
            "get": {
                "operationId": "listServiceProblem", 
                "summary": "List or find 'ServiceProblem' objects", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma separated properties to display in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceProblem"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceProblem", 
                "summary": "Creates a 'ServiceProblem'", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The Service Problem to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblem/{id}": {
            "get": {
                "operationId": "retrieveServiceProblem", 
                "summary": "Retrieves a 'ServiceProblem' by Id", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Problem"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Ok", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceProblem"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceProblem", 
                "summary": "Updates partially a 'ServiceProblem' by Id", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Problem"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The Service Problem to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "ServiceProblem": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B", 
            "required": [
                "category", 
                "priority", 
                "description", 
                "reason", 
                "originatingSystem"
            ], 
            "properties": {
                "affectingServiceNumber": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the Service Problem"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of the service problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1(highest) to 10(lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/FirstAlert"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ExtensionInfo"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedObjectRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceProblem_Create": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href", 
            "required": [
                "category", 
                "priority", 
                "description", 
                "reason", 
                "originatingSystem"
            ], 
            "properties": {
                "affectingServiceNumber": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1(highest) to 10(lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/FirstAlert"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ExtensionInfo"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedObjectRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "ServiceProblem_Update": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href,id,correlationId,originatingSystem,href,firstAlert,timeRaised,trackingRecord", 
            "properties": {
                "affectingServiceNumber": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1(highest) to 10(lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ExtensionInfo"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedPartyRef"
                    }
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedServiceProblemRef"
                    }
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedObjectRef"
                    }
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "TrackingRecord": {
            "type": "object", 
            "description": "Tracking records allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records.", 
            "required": [
                "description"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Describes the action being done (ack,clear...)"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of the TrackingRecord"
                }, 
                "systemId": {
                    "type": "string", 
                    "description": "Describes the system Id from which the action was done."
                }, 
                "time": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Describes the time at which the action was done"
                }, 
                "user": {
                    "type": "string", 
                    "description": "Describes  the user doing the action."
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ExtensionInfo"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A link to the schema describing a resource (for type extension)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "The base type for use in polymorphic collections"
                }
            }
        }, 
        "FirstAlert": {
            "type": "object", 
            "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Reference of the object"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the object"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the object"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        }, 
        "ExtensionInfo": {
            "type": "object", 
            "description": "A generic list of any type of elements. Used for vendor extensions or loose element encapsulation from other namespaces.", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the attribute"
                }, 
                "value": {
                    "type": "string", 
                    "description": "Value of the attribute"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        }, 
        "RelatedPartyRef": {
            "type": "object", 
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.", 
            "required": [
                "id", 
                "href"
            ], 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Reference of the related party, could be a party reference or a party role reference"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a related party"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the related party."
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "RelatedServiceProblemRef": {
            "type": "object", 
            "properties": {
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Problem"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Problem"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ResourceAlarmRef": {
            "type": "object", 
            "description": "A set of alarm ids identifying the alarms that are underlying this problem.", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Reference of the Alarm"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Alarm"
                }, 
                "changeRequest": {
                    "$ref": "#/definitions/ChangeRequestRef"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "EventRef": {
            "type": "object", 
            "description": "Events linked with service problem", 
            "properties": {
                "eventTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the event occurred"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "Type of the event"
                }, 
                "href": {
                    "type": "string", 
                    "description": "event reference"
                }, 
                "id": {
                    "type": "string", 
                    "description": "ID of the event"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ImpactPattern": {
            "type": "object", 
            "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the pre-defined attributes.", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Basic description of the impact pattern"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ExtensionInfo"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "description": "Place reference. Place defines the places where the products are sold or delivered.", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the place"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the place"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        }, 
        "Comment": {
            "type": "object", 
            "description": "Comments on problem, as a list of comments", 
            "properties": {
                "comment": {
                    "type": "string", 
                    "description": "Text of the comment"
                }, 
                "systemId": {
                    "type": "string", 
                    "description": "Describes the system id from which the action was done"
                }, 
                "time": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Describes the time at which the action was done"
                }, 
                "user": {
                    "type": "string", 
                    "description": "Describes the user doing the action"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "The class type of the actual resource (for type extension)."
                }
            }
        }, 
        "RelatedObjectRef": {
            "type": "object", 
            "description": "Objects linked with service problem", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "Reference of the object"
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the object"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the object"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ChangeRequestRef": {
            "type": "object", 
            "description": "Reference to a Change Request", 
            "properties": {
                "href": {
                    "type": "string", 
                    "description": "The reference link to the change request"
                }, 
                "id": {
                    "type": "string", 
                    "description": "The identifier of the change request"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application related code."
                }, 
                "reason": {
                    "type": "integer", 
                    "description": "Text that explains the reason for error."
                }, 
                "message": {
                    "type": "string", 
                    "description": "(optional) Text that provide more details and corrective actions related to the error."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "(optional) http error code extension like 400-2"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "(optional) A URL to online documentation that provides more information about the error."
                }, 
                "@type": {
                    "type": "string", 
                    "description": "(optional) The class type of a REST resource."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "(optional) A link to the schema describing a REST resource."
                }
            }
        }
    }
}