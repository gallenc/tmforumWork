#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>${groupId}</groupId>
        <artifactId>${tmfSpecPackageName}-jaxrs-generate-code</artifactId>
        <version>${version}</version>
    </parent>

    <artifactId>${tmfSpecPackageName}-generate-jaxrs-server-spec</artifactId>
    <packaging>jar</packaging>

    <!-- see https://stackoverflow.com/questions/49384545/how-to-generate-client-code-using-with-swagger-codegen-plugin-maven -->
    <properties>
        <spec.file>${symbol_dollar}{project.basedir}${symbol_dollar}{file.separator}target${symbol_dollar}{file.separator}download${symbol_dollar}{file.separator}specification${symbol_dollar}{file.separator}TMF656-ServiceProblem-3.0.0.swagger.json</spec.file>
        <generated-sources-path>${symbol_dollar}{project.build.directory}${symbol_dollar}{file.separator}generated-sources</generated-sources-path>
        <generated-sources-java-path>src${symbol_dollar}{file.separator}main${symbol_dollar}{file.separator}java</generated-sources-java-path>
    </properties>

    <build>
        <plugins>

            <!-- prevent this artifact from deploying to central repo - deploy separate modules -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- this plugin unpacks the swagger specification -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${groupId}</groupId>
                                    <artifactId>${tmfSpecPackageName}-specification</artifactId>
                                    <version>${symbol_dollar}{project.version}</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${symbol_dollar}{project.basedir}${symbol_dollar}{file.separator}target${symbol_dollar}{file.separator}download</outputDirectory>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <!-- A comma separated list of file patterns to exclude when unpacking the artifact. i.e. **/*.xml,**/*.properties -->
                            <!-- use this to exclude more generated code as project is built -->
                            <excludes></excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- this plugin generates server code from the swagger specification -->
            <plugin>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-codegen-maven-plugin</artifactId>
                <version>${symbol_dollar}{version.swagger.codegen}</version>
                <configuration>
                    <inputSpec>${symbol_dollar}{spec.file}</inputSpec>
                    <configOptions>
                        <sourceFolder>${symbol_dollar}{generated-sources-java-path}</sourceFolder>
                        <library>jersey2</library>
                        <dateLibrary>java8</dateLibrary>
                    </configOptions>
                    <output>${symbol_dollar}{generated-sources-path}</output>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-swagger-spring</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <!-- <language>jaxrs</language> -->
                            <language>${package}.patch.JavaJerseyServerCodegen</language>

                            <addCompileSourceRoot>false</addCompileSourceRoot>

                            <modelPackage>${symbol_dollar}{project.groupId}.${symbol_dollar}{specPackageName}.swagger.model</modelPackage>
                            <apiPackage>${symbol_dollar}{project.groupId}.${symbol_dollar}{specPackageName}.swagger.api</apiPackage>
                            <invokerPackage>${symbol_dollar}{project.groupId}.${symbol_dollar}{specPackageName}.swagger.invoker</invokerPackage>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>${groupId}</groupId>
                        <artifactId>swagger-codegen-jaxrs-patch</artifactId>
                        <version>${symbol_dollar}{project.version}</version>
                        <!-- prevent pulling in other tansitive dependencies -->
                        <exclusions>
                            <exclusion>
                                <groupId>*</groupId>
                                <artifactId>*</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>

                <!-- remove ambiguities about whether we are using avax.ws.rs.PATCH and not io.swagger.jaxrs.PATCH -->
                <executions>
                    <execution>
                        <id>make-sure-PATCH-works</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/api/*.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- makes sure we use javax.ws.rs.PATCH and not io.swagger.jaxrs.PATCH -->
                                <replacement>
                                    <token><![CDATA[PATCH]]></token>
                                    <value>javax.ws.rs.PATCH</value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>

                    <!-- to do remove - factories are not used -->
                    <execution>
                        <id>add-inject-to-factories</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/factories/*.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- <replacement> -->
                                <!-- <token><![CDATA[public class]]></token> -->
                                <!-- <value><![CDATA[${symbol_dollar}{line.separator}@javax.inject.Named${symbol_dollar}{line.separator}public class]]></value> -->
                                <!-- </replacement> -->
                                <!-- <replacement> -->
                                <!-- <token><![CDATA[private final static]]></token> -->
                                <!-- <value><![CDATA[${symbol_dollar}{line.separator} @javax.inject.Inject${symbol_dollar}{line.separator} private final static]]></value> -->
                                <!-- </replacement> -->
                                <!-- <replacement> -->
                                <!-- <token><![CDATA[public static]]></token> -->
                                <!-- <value><![CDATA[public ]]></value> -->
                                <!-- </replacement> -->

                                <!-- <replacement> -->
                                <!-- <token><![CDATA[service = new]]></token> -->
                                <!-- <value><![CDATA[service = null; // = new]]></value> -->
                                <!-- </replacement> -->
                            </replacements>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-inject-to-api</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/api/*Api.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- modifies code to allow delegate to be injected to service classes (order is important) -->

                                <!-- removes factories import code -->
                                <replacement>
                                    <token><![CDATA[import ${symbol_dollar}{project.groupId}.${symbol_dollar}{specPackageName}.swagger.api.factories]]></token>
                                    <value><![CDATA[//import ${symbol_dollar}{project.groupId}.${symbol_dollar}{specPackageName}.swagger.api.factories]]></value>
                                </replacement>
                                <replacement>
                                    <token><![CDATA[servletContext) {]]></token>
                                    <value><![CDATA[servletContext) {${symbol_dollar}{line.separator}    /* removing constructor code so that inject works]]></value>
                                </replacement>
                                <!-- TODO REMOVE <replacement> -->
                                <!-- <token> if (delegate == null) {</token> -->
                                <!-- <value><![CDATA[ */${symbol_dollar}{line.separator} if (delegate == null) {]]></value> -->
                                <!-- </replacement> -->
                                <replacement>
                                    <token><![CDATA[this.delegate = delegate;]]></token>
                                    <value><![CDATA[this.delegate = delegate;${symbol_dollar}{line.separator}    */]]></value>
                                </replacement>
                                <!-- adds @Named so that class is discovered by spring/karaf -->
                                <replacement>
                                    <token><![CDATA[public class]]></token>
                                    <value><![CDATA[${symbol_dollar}{line.separator}// NOTE this class has been modified by maven-replacer-plugin from swagger generated class to allow injection${symbol_dollar}{line.separator}@javax.inject.Named${symbol_dollar}{line.separator}public class]]></value>
                                </replacement>
                                <!-- adds @Inject so that class is wired by spring/karaf -->
                                <replacement>
                                    <token><![CDATA[private final ]]></token>
                                    <value><![CDATA[${symbol_dollar}{line.separator}   @javax.inject.Inject${symbol_dollar}{line.separator}   private ]]></value>
                                </replacement>
                                <replacement>
                                    <token><![CDATA[Service delegate;]]></token>
                                    <value><![CDATA[Service delegate = null; ]]></value>
                                </replacement>

                            </replacements>
                        </configuration>
                    </execution>
                    <execution>
                        <id>service-impl-inject-returns-not-implemeted</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/impl/*Impl.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- adds @Named so that dummy implementation class is discovered by spring/karaf -->
                                <replacement>
                                    <token><![CDATA[public class]]></token>
                                    <value><![CDATA[${symbol_dollar}{line.separator}// NOTE this class has been modified by maven-replacer-plugin from swagger generated class to allow injection${symbol_dollar}{line.separator}@javax.inject.Named${symbol_dollar}{line.separator}public class]]></value>
                                </replacement>
                                <!-- gets class name into a string for debug -->
                                <replacement>
                                    <token><![CDATA[ApiService {]]></token>
                                    <value><![CDATA[ApiService {${symbol_dollar}{line.separator}${symbol_dollar}{line.separator}    // statically finds the fully qualified name of this class${symbol_dollar}{line.separator}    private static String apiServiceImplClassName = java.lang.invoke.MethodHandles.lookup().lookupClass().getName();${symbol_dollar}{line.separator}]]></value>
                                </replacement>
                                <!-- changes response to error not implemented -->
                                <replacement>
                                    <token><![CDATA[return Response.ok()]]></token>
                                    <value><![CDATA[return Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(new ApiResponseMessage(ApiResponseMessage.ERROR, "this method not implemented in class="+apiServiceImplClassName)).build();${symbol_dollar}{line.separator}        // return Response.ok()]]></value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>

                    <!-- This is a work around because I cannot yet find out how to make the Jackson objectFactory respect empty objects -->
                    <execution>
                        <id>fix-Any</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/model/Any.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- modifies code so that Any fieled can be accessed by jackson -->
                                <!-- this may not be necessary if the object mapper can be fixed -->
                                <replacement>
                                    <token><![CDATA[public class Any   {]]></token>
                                    <value><![CDATA[public class Any   {${symbol_dollar}{line.separator}${symbol_dollar}{line.separator}  //added to prevent empty field problems in jackson${symbol_dollar}{line.separator}  @com.fasterxml.jackson.annotation.JsonProperty("anyStr")${symbol_dollar}{line.separator}  private String anyStr=null;${symbol_dollar}{line.separator}${symbol_dollar}{line.separator}  @com.fasterxml.jackson.annotation.JsonProperty("anyStr")${symbol_dollar}{line.separator}  public String getAnyStr() {return anyStr;}${symbol_dollar}{line.separator}${symbol_dollar}{line.separator}  public void setAnyStr(String anyStr) { this.anyStr = anyStr; }]]></value>
                                </replacement>

                            </replacements>
                        </configuration>
                    </execution>

                    <!-- These replacements allow Rest service access to UriInfo by UriInfo to generated code -->
                    <execution>
                        <id>add-request-uri-to-api-service</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/api/*ApiService.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- makes sure we use javax.ws.rs.core.UriInfo uriInfo -->
                                <replacement>
                                    <token><![CDATA[SecurityContext securityContext)]]></token>
                                    <value><![CDATA[SecurityContext securityContext, javax.ws.rs.core.UriInfo uriInfo)]]></value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-request-uri-to-api-service-impl</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/impl/*ApiServiceImpl.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- makes sure we use javax.ws.rs.core.UriInfo uriInfo -->
                                <replacement>
                                    <token><![CDATA[SecurityContext securityContext)]]></token>
                                    <value><![CDATA[SecurityContext securityContext, javax.ws.rs.core.UriInfo uriInfo)]]></value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-request-uri-to-api</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <basedir>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</basedir>
                            <includes>
                                <include>**/api/*Api.java</include>
                            </includes>
                            <regex>false</regex>
                            <replacements>
                                <!-- makes sure we use javax.ws.rs.core.UriInfo uriInfo -->
                                <replacement>
                                    <token><![CDATA[SecurityContext securityContext)]]></token>
                                    <value><![CDATA[SecurityContext securityContext, @Context javax.ws.rs.core.UriInfo uriInfo)]]></value>
                                </replacement>
                                <replacement>
                                    <token><![CDATA[securityContext);]]></token>
                                    <value><![CDATA[securityContext, uriInfo);]]></value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>
                </executions>

            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-generated-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${symbol_dollar}{generated-sources-path}${symbol_dollar}{file.separator}${symbol_dollar}{generated-sources-java-path}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>api</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>api</classifier>
                            <includes>
                                <include>**/api/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/api/factories</exclude>
                                <exclude>**/api/impl</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>model</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>model</classifier>
                            <includes>
                                <include>**/model/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/api/factories</exclude>
                                <exclude>**/api/impl</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>mock-impl</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>mock-impl</classifier>
                            <includes>
                                <include>**/impl/*</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>

                <executions>
                    <execution>
                        <id>api</id>
                        <goals>
                            <!-- note jar-no-fork goal used to avoid generate-code running before each execution -->
                            <goal>jar-no-fork</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>api-sources</classifier>
                            <includes>
                                <include>**/api/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/api/factories</exclude>
                                <exclude>**/api/impl</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>model</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>model-sources</classifier>
                            <includes>
                                <include>**/model/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/api/factories</exclude>
                                <exclude>**/api/impl</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>mock-impl</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>mock-impl-sources</classifier>
                            <includes>
                                <include>**/impl/*</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${symbol_dollar}{java.version}</source>
                    <target>${symbol_dollar}{java.version}</target>
                </configuration>
            </plugin>

        </plugins>


    </build>

    <dependencies>

        <!-- JSR330 dependency injection api -->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jersey2-jaxrs</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Logging -->
        <!-- SLF4J api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- <dependency> -->
        <!-- <groupId>ch.qos.logback</groupId> -->
        <!-- <artifactId>logback-classic</artifactId> -->
        <!-- <scope>provided</scope> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!-- <groupId>ch.qos.logback</groupId> -->
        <!-- <artifactId>logback-core</artifactId> -->
        <!-- <scope>provided</scope> -->
        <!-- </dependency> -->

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- <dependency> -->
        <!-- <groupId>com.fasterxml.jackson.datatype</groupId> -->
        <!-- <artifactId>jackson-datatype-joda</artifactId> -->
        <!-- <scope>provided</scope> -->
        <!-- </dependency> -->

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Base64 encoding that works in both JVM and Android -->
        <dependency>
            <groupId>com.brsanthu</groupId>
            <artifactId>migbase64</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Bean Validation API support -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>


</project>