#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>${groupId}</groupId>
        <artifactId>${artifactId}</artifactId>
        <version>${version}</version>
    </parent>

    <groupId>org.opennms.tmforum</groupId>
    <artifactId>${tmfSpecPackageName}-simulator-war</artifactId>
    <packaging>war</packaging>

    <properties>

    </properties>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <plugins>

            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <configuration>
                    <webApp>
                        <contextPath>/${symbol_dollar}{project.artifactId}/</contextPath>
                    </webApp>
                    <webAppSourceDirectory>target/${symbol_dollar}{project.artifactId}</webAppSourceDirectory>
                    <!-- <stopPort>8079</stopPort> -->
                    <!-- <stopKey>stopit</stopKey> -->
                    <!-- <stopWait>10</stopWait> -->
                    <!-- <httpConnector> -->
                    <!-- <port>8080</port> -->
                    <!-- <idleTimeout>60000</idleTimeout> -->
                    <!-- </httpConnector> -->
                    <!-- configuration to create a connector -->
                    <jettyXml>${symbol_dollar}{project.basedir}/src/test/resources/jetty.xml,${symbol_dollar}{project.basedir}/src/test/resources/jetty-http.xml,${symbol_dollar}{project.basedir}/src/test/resources/jetty-ssl.xml,${symbol_dollar}{project.basedir}/src/test/resources/jetty-https.xml</jettyXml>
                </configuration>
                <executions>
                    <!-- <execution> -->
                    <!-- <id>start-jetty</id> -->
                    <!-- <phase>pre-integration-test</phase> -->
                    <!-- <goals> -->
                    <!-- <goal>start</goal> -->
                    <!-- </goals> -->
                    <!-- <configuration> -->
                    <!-- <scanIntervalSeconds>0</scanIntervalSeconds> -->
                    <!-- <daemon>true</daemon> -->
                    <!-- </configuration> -->
                    <!-- </execution> -->
                    <!-- <execution> -->
                    <!-- <id>stop-jetty</id> -->
                    <!-- <phase>post-integration-test</phase> -->
                    <!-- <goals> -->
                    <!-- <goal>stop</goal> -->
                    <!-- </goals> -->
                    <!-- </execution> -->
                </executions>
                <!-- <dependencies> -->
                <!-- <dependency> -->
                <!-- <groupId>org.slf4j</groupId> -->
                <!-- <artifactId>slf4j-log4j12</artifactId> -->
                <!-- <version>1.6.4</version> -->
                <!-- </dependency> -->
                <!-- </dependencies> -->
            </plugin>

            <!-- added for logs in jetty -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>set-system-properties</goal>
                        </goals>
                        <!-- logback -->
                        <!-- <configuration> -->
                        <!-- <properties> -->
                        <!-- makes jetty log the exception if it fails to initialize slf4j -->
                        <!-- <property> -->
                        <!-- <name>org.eclipse.jetty.util.log.IGNORED</name> -->
                        <!-- <value>true</value> -->
                        <!-- </property> -->
                        <!-- Location of logback config -->
                        <!-- <property> -->
                        <!-- <name>logback.configurationFile</name> -->
                        <!-- <value>./src/main/resources/logback.xml</value> -->
                        <!-- </property> -->
                        <!-- </properties> -->
                        <!-- </configuration> -->

                        <!-- log4j -->
                        <configuration>
                            <properties>
                                <!-- makes jetty log the exception if it fails to initialize slf4j -->
                                <property>
                                    <name>org.eclipse.jetty.util.log.IGNORED</name>
                                    <value>true</value>
                                </property>
                                <!-- this tells where the log4j configuration is -->
                                <property>
                                    <name>log4j.configuration</name>
                                    <value>file:./src/main/resources/log4j2.xml</value>
                                </property>
                                <!-- this can be uncommented to debug startup log4j itself, e.g. -->
                                <!-- how it locates log4j.properties etc -->
                                <property>
                                    <!-- <name>log4j.debug</name> -->
                                    <!-- <value></value> -->
                                </property>
                            </properties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--  generates new self signed certificate -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>genkey</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <keystore>${symbol_dollar}{project.build.directory}/jetty.keystore</keystore>
                    <dname>cn=localhost</dname>
                    <keypass>secret</keypass>
                    <storepass>secret</storepass>
                    <alias>jetty9</alias>
                    <keyalg>RSA</keyalg>
                </configuration>
            </plugin>

            <!-- this plugin downloads the swagger ui -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.webjars</groupId>
                                    <artifactId>swagger-ui</artifactId>
                                    <version>${symbol_dollar}{swagger-ui.version}</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${symbol_dollar}{project.build.directory}/swagger-ui</outputDirectory>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- This plugin substitutes the correct openapi url to swagger -->
            <!-- see Co-hosting Swagger UI with your Jersey REST API using Maven dependencies -->
            <!-- https://medium.com/shark-bytes/co-hosting-swagger-ui-with-your-jersey-rest-api-using-maven-dependencies-44d88ae85bf8 -->
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>

                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <file>${symbol_dollar}{project.build.directory}/swagger-ui/META-INF/resources/webjars/swagger-ui/${symbol_dollar}{swagger-ui.version}/index.html</file>
                    <replacements>
                        <replacement>
                            <token>https://petstore.swagger.io/v2/swagger.json</token>
                            <value>/${symbol_dollar}{project.artifactId}${tmfSpecUrlPath}swagger.json</value>
                        </replacement>
                    </replacements>
                </configuration>
            </plugin>

            <!-- this plugin builds the war including the swagger ui -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <finalName>${symbol_dollar}{project.artifactId}</finalName>
                    <webResources>
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>${symbol_dollar}{project.build.directory}/swagger-ui/META-INF/resources/webjars/swagger-ui/${symbol_dollar}{swagger-ui.version}</directory>
                            <targetPath>WEB-INF/resources/swagger-ui</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.eclipse.m2e</groupId>
                <artifactId>lifecycle-mapping</artifactId>
            </plugin>

        </plugins>


    </build>

    <dependencies>

        <!-- project dependencies -->
        <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>${tmfSpecPackageName}-jaxrs-generated-server-spec-model</artifactId>
            <version>${symbol_dollar}{project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>${tmfSpecPackageName}-jaxrs-generated-server-spec-api</artifactId>
            <version>${symbol_dollar}{project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>${tmfSpecPackageName}-simulator-service</artifactId>
            <version>${symbol_dollar}{project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>${groupId}</groupId>
            <artifactId>${tmfSpecPackageName}-simulator-dao</artifactId>
            <version>${symbol_dollar}{project.version}</version>
            <scope>compile</scope>
        </dependency>
        
        
        <!-- base project dependencies -->
        <dependency>
            <groupId>org.opennms.tmforum.swagger</groupId>
            <artifactId>simulator-dao-base</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>
        
        <dependency>
            <groupId>org.opennms.tmforum.swagger</groupId>
            <artifactId>simulator-service-base</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- dependencies -->

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jersey2-jaxrs</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Logging -->
        <!-- SLF4J api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- running jcl over slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- running jul over slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- log4j core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>compile</scope>
        </dependency>
        <!-- running SLF4J over log4j -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Log4j web required to run in a servelet context -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-web</artifactId>
            <scope>compile</scope>
        </dependency>


        <!-- <dependency> -->
        <!-- <groupId>ch.qos.logback</groupId> -->
        <!-- <artifactId>logback-classic</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->
        <!-- <dependency> -->
        <!-- <groupId>ch.qos.logback</groupId> -->
        <!-- <artifactId>logback-core</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->

        <!-- servelet and jsp api's - provided by jetty -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- java server tag library -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Spring dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <scope>compile</scope>
        </dependency>

        <!--Spring MVC framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Spring-Data-JPA -->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- spring test framework -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- JPA Implementation (Hibernate) -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- needed by Hibernate for java 11 -->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- IN MEMORY Database and JDBC Driver -->
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>compile</scope>
        </dependency>


        <!-- to allow jersey to work with spring as a component -->
        <!-- note if not present need to have jersey-hk2 on classpath -->
        <dependency>
            <groupId>org.glassfish.jersey.ext</groupId>
            <artifactId>jersey-spring5</artifactId>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- use if not using spring -->
        <!-- <dependency> -->
        <!-- <groupId>org.glassfish.jersey.inject</groupId> -->
        <!-- <artifactId>jersey-hk2</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->

        <!-- Jackson json -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- <dependency> -->
        <!-- <groupId>com.fasterxml.jackson.datatype</groupId> -->
        <!-- <artifactId>jackson-datatype-joda</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->

        <!-- <dependency> -->
        <!-- <groupId>com.fasterxml.jackson.module</groupId> -->
        <!-- <artifactId>jackson-modules-java8</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- <dependency> -->
        <!-- <groupId>org.glassfish.jersey.media</groupId> -->
        <!-- <artifactId>jersey-media-json-jackson</artifactId> -->
        <!-- <scope>compile</scope> -->
        <!-- </dependency> -->

        <!-- Base64 encoding that works in both JVM and Android -->
        <dependency>
            <groupId>com.brsanthu</groupId>
            <artifactId>migbase64</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Bean Validation API support -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>


</project>
